!function(e){var n={};function r(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)r.d(t,o,function(n){return e[n]}.bind(null,o));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/",r(r.s=1)}([function(e,n,r){"use strict";r.r(n),r.d(n,"F",(function(){return t})),r.d(n,"T",(function(){return o})),r.d(n,"__",(function(){return i})),r.d(n,"add",(function(){return s})),r.d(n,"addIndex",(function(){return p})),r.d(n,"adjust",(function(){return v})),r.d(n,"all",(function(){return A})),r.d(n,"allPass",(function(){return Z})),r.d(n,"always",(function(){return ee})),r.d(n,"and",(function(){return ne})),r.d(n,"any",(function(){return te})),r.d(n,"anyPass",(function(){return oe})),r.d(n,"ap",(function(){return ie})),r.d(n,"aperture",(function(){return ae})),r.d(n,"append",(function(){return se})),r.d(n,"apply",(function(){return de})),r.d(n,"applySpec",(function(){return le})),r.d(n,"applyTo",(function(){return pe})),r.d(n,"ascend",(function(){return me})),r.d(n,"assoc",(function(){return ve})),r.d(n,"assocPath",(function(){return Ue})),r.d(n,"binary",(function(){return ye})),r.d(n,"bind",(function(){return M})),r.d(n,"both",(function(){return Fe})),r.d(n,"call",(function(){return Ee})),r.d(n,"chain",(function(){return Oe})),r.d(n,"clamp",(function(){return Me})),r.d(n,"clone",(function(){return ke})),r.d(n,"comparator",(function(){return Ge})),r.d(n,"complement",(function(){return Ne})),r.d(n,"compose",(function(){return Ve})),r.d(n,"composeK",(function(){return We})),r.d(n,"composeP",(function(){return He})),r.d(n,"composeWith",(function(){return Ze})),r.d(n,"concat",(function(){return yn})),r.d(n,"cond",(function(){return Tn})),r.d(n,"construct",(function(){return An})),r.d(n,"constructN",(function(){return gn})),r.d(n,"contains",(function(){return Fn})),r.d(n,"converge",(function(){return Dn})),r.d(n,"countBy",(function(){return Ln})),r.d(n,"curry",(function(){return De})),r.d(n,"curryN",(function(){return l})),r.d(n,"dec",(function(){return On})),r.d(n,"defaultTo",(function(){return Mn})),r.d(n,"descend",(function(){return bn})),r.d(n,"difference",(function(){return kn})),r.d(n,"differenceWith",(function(){return Gn})),r.d(n,"dissoc",(function(){return wn})),r.d(n,"dissocPath",(function(){return In})),r.d(n,"divide",(function(){return jn})),r.d(n,"drop",(function(){return Qn})),r.d(n,"dropLast",(function(){return qn})),r.d(n,"dropLastWhile",(function(){return zn})),r.d(n,"dropRepeats",(function(){return nr})),r.d(n,"dropRepeatsWith",(function(){return er})),r.d(n,"dropWhile",(function(){return tr})),r.d(n,"either",(function(){return ir})),r.d(n,"empty",(function(){return ur})),r.d(n,"endsWith",(function(){return ar})),r.d(n,"eqBy",(function(){return sr})),r.d(n,"eqProps",(function(){return dr})),r.d(n,"equals",(function(){return un})),r.d(n,"evolve",(function(){return fr})),r.d(n,"filter",(function(){return vn})),r.d(n,"find",(function(){return lr})),r.d(n,"findIndex",(function(){return mr})),r.d(n,"findLast",(function(){return hr})),r.d(n,"findLastIndex",(function(){return Sr})),r.d(n,"flatten",(function(){return yr})),r.d(n,"flip",(function(){return Tr})),r.d(n,"forEach",(function(){return gr})),r.d(n,"forEachObjIndexed",(function(){return Ar})),r.d(n,"fromPairs",(function(){return Fr})),r.d(n,"groupBy",(function(){return Dr})),r.d(n,"groupWith",(function(){return Er})),r.d(n,"gt",(function(){return Br})),r.d(n,"gte",(function(){return Lr})),r.d(n,"has",(function(){return Mr})),r.d(n,"hasIn",(function(){return br})),r.d(n,"hasPath",(function(){return Or})),r.d(n,"head",(function(){return Ye})),r.d(n,"identical",(function(){return xr})),r.d(n,"identity",(function(){return $e})),r.d(n,"ifElse",(function(){return Rr})),r.d(n,"inc",(function(){return kr})),r.d(n,"includes",(function(){return Gr})),r.d(n,"indexBy",(function(){return wr})),r.d(n,"indexOf",(function(){return Nr})),r.d(n,"init",(function(){return Jr})),r.d(n,"innerJoin",(function(){return Ir})),r.d(n,"insert",(function(){return jr})),r.d(n,"insertAll",(function(){return Pr})),r.d(n,"intersection",(function(){return Vr})),r.d(n,"intersperse",(function(){return Wr})),r.d(n,"into",(function(){return $r})),r.d(n,"invert",(function(){return Xr})),r.d(n,"invertObj",(function(){return Zr})),r.d(n,"invoker",(function(){return et})),r.d(n,"is",(function(){return nt})),r.d(n,"isEmpty",(function(){return rt})),r.d(n,"isNil",(function(){return he})),r.d(n,"join",(function(){return tt})),r.d(n,"juxt",(function(){return ot})),r.d(n,"keys",(function(){return V})),r.d(n,"keysIn",(function(){return it})),r.d(n,"last",(function(){return Zn})),r.d(n,"lastIndexOf",(function(){return ut})),r.d(n,"length",(function(){return at})),r.d(n,"lens",(function(){return st})),r.d(n,"lensIndex",(function(){return dt})),r.d(n,"lensPath",(function(){return ft})),r.d(n,"lensProp",(function(){return Ct})),r.d(n,"lift",(function(){return Ae})),r.d(n,"liftN",(function(){return ge})),r.d(n,"lt",(function(){return lt})),r.d(n,"lte",(function(){return pt})),r.d(n,"map",(function(){return W})),r.d(n,"mapAccum",(function(){return mt})),r.d(n,"mapAccumRight",(function(){return vt})),r.d(n,"mapObjIndexed",(function(){return ht})),r.d(n,"match",(function(){return Ut})),r.d(n,"mathMod",(function(){return St})),r.d(n,"max",(function(){return F})),r.d(n,"maxBy",(function(){return yt})),r.d(n,"mean",(function(){return gt})),r.d(n,"median",(function(){return At})),r.d(n,"memoizeWith",(function(){return Ft})),r.d(n,"merge",(function(){return Dt})),r.d(n,"mergeAll",(function(){return Et})),r.d(n,"mergeDeepLeft",(function(){return Ot})),r.d(n,"mergeDeepRight",(function(){return Mt})),r.d(n,"mergeDeepWith",(function(){return bt})),r.d(n,"mergeDeepWithKey",(function(){return Lt})),r.d(n,"mergeLeft",(function(){return xt})),r.d(n,"mergeRight",(function(){return Rt})),r.d(n,"mergeWith",(function(){return kt})),r.d(n,"mergeWithKey",(function(){return Bt})),r.d(n,"min",(function(){return Gt})),r.d(n,"minBy",(function(){return wt})),r.d(n,"modulo",(function(){return Nt})),r.d(n,"move",(function(){return Jt})),r.d(n,"multiply",(function(){return It})),r.d(n,"nAry",(function(){return Se})),r.d(n,"negate",(function(){return jt})),r.d(n,"none",(function(){return Pt})),r.d(n,"not",(function(){return we})),r.d(n,"nth",(function(){return q})),r.d(n,"nthArg",(function(){return Qt})),r.d(n,"o",(function(){return Kt})),r.d(n,"objOf",(function(){return qr})),r.d(n,"of",(function(){return Wt})),r.d(n,"omit",(function(){return _t})),r.d(n,"once",(function(){return qt})),r.d(n,"or",(function(){return or})),r.d(n,"otherwise",(function(){return Yt})),r.d(n,"over",(function(){return $t})),r.d(n,"pair",(function(){return Xt})),r.d(n,"partial",(function(){return eo})),r.d(n,"partialRight",(function(){return no})),r.d(n,"partition",(function(){return ro})),r.d(n,"path",(function(){return Y})),r.d(n,"paths",(function(){return H})),r.d(n,"pathEq",(function(){return to})),r.d(n,"pathOr",(function(){return oo})),r.d(n,"pathSatisfies",(function(){return io})),r.d(n,"pick",(function(){return uo})),r.d(n,"pickAll",(function(){return co})),r.d(n,"pickBy",(function(){return ao})),r.d(n,"pipe",(function(){return Qe})),r.d(n,"pipeK",(function(){return so})),r.d(n,"pipeP",(function(){return qe})),r.d(n,"pipeWith",(function(){return Xe})),r.d(n,"pluck",(function(){return $})),r.d(n,"prepend",(function(){return fo})),r.d(n,"product",(function(){return Co})),r.d(n,"project",(function(){return po})),r.d(n,"prop",(function(){return z})),r.d(n,"propEq",(function(){return mo})),r.d(n,"propIs",(function(){return vo})),r.d(n,"propOr",(function(){return ho})),r.d(n,"propSatisfies",(function(){return Uo})),r.d(n,"props",(function(){return So})),r.d(n,"range",(function(){return yo})),r.d(n,"reduce",(function(){return X})),r.d(n,"reduceBy",(function(){return Bn})),r.d(n,"reduceRight",(function(){return To})),r.d(n,"reduceWhile",(function(){return go})),r.d(n,"reduced",(function(){return Ao})),r.d(n,"reject",(function(){return hn})),r.d(n,"remove",(function(){return Nn})),r.d(n,"repeat",(function(){return Do})),r.d(n,"replace",(function(){return Eo})),r.d(n,"reverse",(function(){return Ke})),r.d(n,"scan",(function(){return Bo})),r.d(n,"sequence",(function(){return Lo})),r.d(n,"set",(function(){return Oo})),r.d(n,"slice",(function(){return je})),r.d(n,"sort",(function(){return Mo})),r.d(n,"sortBy",(function(){return bo})),r.d(n,"sortWith",(function(){return xo})),r.d(n,"split",(function(){return Ro})),r.d(n,"splitAt",(function(){return ko})),r.d(n,"splitEvery",(function(){return Go})),r.d(n,"splitWhen",(function(){return wo})),r.d(n,"startsWith",(function(){return No})),r.d(n,"subtract",(function(){return Jo})),r.d(n,"sum",(function(){return Tt})),r.d(n,"symmetricDifference",(function(){return Io})),r.d(n,"symmetricDifferenceWith",(function(){return jo})),r.d(n,"tail",(function(){return Pe})),r.d(n,"take",(function(){return Vn})),r.d(n,"takeLast",(function(){return cr})),r.d(n,"takeLastWhile",(function(){return Po})),r.d(n,"takeWhile",(function(){return Ko})),r.d(n,"tap",(function(){return Wo})),r.d(n,"test",(function(){return _o})),r.d(n,"andThen",(function(){return qo})),r.d(n,"times",(function(){return Fo})),r.d(n,"toLower",(function(){return Ho})),r.d(n,"toPairs",(function(){return Yo})),r.d(n,"toPairsIn",(function(){return zo})),r.d(n,"toString",(function(){return Sn})),r.d(n,"toUpper",(function(){return $o})),r.d(n,"transduce",(function(){return Xo})),r.d(n,"transpose",(function(){return Zo})),r.d(n,"traverse",(function(){return ei})),r.d(n,"trim",(function(){return ri})),r.d(n,"tryCatch",(function(){return ti})),r.d(n,"type",(function(){return xe})),r.d(n,"unapply",(function(){return oi})),r.d(n,"unary",(function(){return ii})),r.d(n,"uncurryN",(function(){return ui})),r.d(n,"unfold",(function(){return ci})),r.d(n,"union",(function(){return ai})),r.d(n,"unionWith",(function(){return di})),r.d(n,"uniq",(function(){return Kr})),r.d(n,"uniqBy",(function(){return Qr})),r.d(n,"uniqWith",(function(){return si})),r.d(n,"unless",(function(){return fi})),r.d(n,"unnest",(function(){return Ci})),r.d(n,"until",(function(){return li})),r.d(n,"update",(function(){return Jn})),r.d(n,"useWith",(function(){return lo})),r.d(n,"values",(function(){return fe})),r.d(n,"valuesIn",(function(){return pi})),r.d(n,"view",(function(){return vi})),r.d(n,"when",(function(){return hi})),r.d(n,"where",(function(){return Ui})),r.d(n,"whereEq",(function(){return Si})),r.d(n,"without",(function(){return yi})),r.d(n,"xor",(function(){return Ti})),r.d(n,"xprod",(function(){return gi})),r.d(n,"zip",(function(){return Ai})),r.d(n,"zipObj",(function(){return Fi})),r.d(n,"zipWith",(function(){return Di})),r.d(n,"thunkify",(function(){return Ei}));var t=function(){return!1},o=function(){return!0},i={"@@functional/placeholder":!0};function u(e){return null!=e&&"object"==typeof e&&!0===e["@@functional/placeholder"]}function c(e){return function n(r){return 0===arguments.length||u(r)?n:e.apply(this,arguments)}}function a(e){return function n(r,t){switch(arguments.length){case 0:return n;case 1:return u(r)?n:c((function(n){return e(r,n)}));default:return u(r)&&u(t)?n:u(r)?c((function(n){return e(n,t)})):u(t)?c((function(n){return e(r,n)})):e(r,t)}}}var s=a((function(e,n){return Number(e)+Number(n)}));function d(e,n){var r;n=n||[];var t=(e=e||[]).length,o=n.length,i=[];for(r=0;r<t;)i[i.length]=e[r],r+=1;for(r=0;r<o;)i[i.length]=n[r],r+=1;return i}function f(e,n){switch(e){case 0:return function(){return n.apply(this,arguments)};case 1:return function(e){return n.apply(this,arguments)};case 2:return function(e,r){return n.apply(this,arguments)};case 3:return function(e,r,t){return n.apply(this,arguments)};case 4:return function(e,r,t,o){return n.apply(this,arguments)};case 5:return function(e,r,t,o,i){return n.apply(this,arguments)};case 6:return function(e,r,t,o,i,u){return n.apply(this,arguments)};case 7:return function(e,r,t,o,i,u,c){return n.apply(this,arguments)};case 8:return function(e,r,t,o,i,u,c,a){return n.apply(this,arguments)};case 9:return function(e,r,t,o,i,u,c,a,s){return n.apply(this,arguments)};case 10:return function(e,r,t,o,i,u,c,a,s,d){return n.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}function C(e,n,r){return function(){for(var t=[],o=0,i=e,c=0;c<n.length||o<arguments.length;){var a;c<n.length&&(!u(n[c])||o>=arguments.length)?a=n[c]:(a=arguments[o],o+=1),t[c]=a,u(a)||(i-=1),c+=1}return i<=0?r.apply(this,t):f(i,C(e,t,r))}}var l=a((function(e,n){return 1===e?c(n):f(e,C(e,[],n))})),p=c((function(e){return l(e.length,(function(){var n=0,r=arguments[0],t=arguments[arguments.length-1],o=Array.prototype.slice.call(arguments,0);return o[0]=function(){var e=r.apply(this,d(arguments,[n,t]));return n+=1,e},e.apply(this,o)}))}));function m(e){return function n(r,t,o){switch(arguments.length){case 0:return n;case 1:return u(r)?n:a((function(n,t){return e(r,n,t)}));case 2:return u(r)&&u(t)?n:u(r)?a((function(n,r){return e(n,t,r)})):u(t)?a((function(n,t){return e(r,n,t)})):c((function(n){return e(r,t,n)}));default:return u(r)&&u(t)&&u(o)?n:u(r)&&u(t)?a((function(n,r){return e(n,r,o)})):u(r)&&u(o)?a((function(n,r){return e(n,t,r)})):u(t)&&u(o)?a((function(n,t){return e(r,n,t)})):u(r)?c((function(n){return e(n,t,o)})):u(t)?c((function(n){return e(r,n,o)})):u(o)?c((function(n){return e(r,t,n)})):e(r,t,o)}}}var v=m((function(e,n,r){if(e>=r.length||e<-r.length)return r;var t=(e<0?r.length:0)+e,o=d(r);return o[t]=n(r[t]),o})),h=Array.isArray||function(e){return null!=e&&e.length>=0&&"[object Array]"===Object.prototype.toString.call(e)};function U(e){return null!=e&&"function"==typeof e["@@transducer/step"]}function S(e,n,r){return function(){if(0===arguments.length)return r();var t=Array.prototype.slice.call(arguments,0),o=t.pop();if(!h(o)){for(var i=0;i<e.length;){if("function"==typeof o[e[i]])return o[e[i]].apply(o,t);i+=1}if(U(o)){var u=n.apply(null,t);return u(o)}}return r.apply(this,arguments)}}function y(e){return e&&e["@@transducer/reduced"]?e:{"@@transducer/value":e,"@@transducer/reduced":!0}}var T={init:function(){return this.xf["@@transducer/init"]()},result:function(e){return this.xf["@@transducer/result"](e)}},g=function(){function e(e,n){this.xf=n,this.f=e,this.all=!0}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){return this.all&&(e=this.xf["@@transducer/step"](e,!0)),this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,n){return this.f(n)||(this.all=!1,e=y(this.xf["@@transducer/step"](e,!1))),e},e}(),A=a(S(["all"],a((function(e,n){return new g(e,n)})),(function(e,n){for(var r=0;r<n.length;){if(!e(n[r]))return!1;r+=1}return!0}))),F=a((function(e,n){return n>e?n:e}));function D(e,n){for(var r=0,t=n.length,o=Array(t);r<t;)o[r]=e(n[r]),r+=1;return o}function E(e){return"[object String]"===Object.prototype.toString.call(e)}var B=c((function(e){return!!h(e)||!!e&&("object"==typeof e&&(!E(e)&&(1===e.nodeType?!!e.length:0===e.length||e.length>0&&(e.hasOwnProperty(0)&&e.hasOwnProperty(e.length-1)))))})),L=function(){function e(e){this.f=e}return e.prototype["@@transducer/init"]=function(){throw new Error("init not implemented on XWrap")},e.prototype["@@transducer/result"]=function(e){return e},e.prototype["@@transducer/step"]=function(e,n){return this.f(e,n)},e}();function O(e){return new L(e)}var M=a((function(e,n){return f(e.length,(function(){return e.apply(n,arguments)}))}));function b(e,n,r){for(var t=r.next();!t.done;){if((n=e["@@transducer/step"](n,t.value))&&n["@@transducer/reduced"]){n=n["@@transducer/value"];break}t=r.next()}return e["@@transducer/result"](n)}function x(e,n,r,t){return e["@@transducer/result"](r[t](M(e["@@transducer/step"],e),n))}var R="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator";function k(e,n,r){if("function"==typeof e&&(e=O(e)),B(r))return function(e,n,r){for(var t=0,o=r.length;t<o;){if((n=e["@@transducer/step"](n,r[t]))&&n["@@transducer/reduced"]){n=n["@@transducer/value"];break}t+=1}return e["@@transducer/result"](n)}(e,n,r);if("function"==typeof r["fantasy-land/reduce"])return x(e,n,r,"fantasy-land/reduce");if(null!=r[R])return b(e,n,r[R]());if("function"==typeof r.next)return b(e,n,r);if("function"==typeof r.reduce)return x(e,n,r,"reduce");throw new TypeError("reduce: list must be array or iterable")}var G=function(){function e(e,n){this.xf=n,this.f=e}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=T.result,e.prototype["@@transducer/step"]=function(e,n){return this.xf["@@transducer/step"](e,this.f(n))},e}(),w=a((function(e,n){return new G(e,n)}));function N(e,n){return Object.prototype.hasOwnProperty.call(n,e)}var J=Object.prototype.toString,I=function(){return"[object Arguments]"===J.call(arguments)?function(e){return"[object Arguments]"===J.call(e)}:function(e){return N("callee",e)}}(),j=!{toString:null}.propertyIsEnumerable("toString"),P=["constructor","valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],Q=function(){return arguments.propertyIsEnumerable("length")}(),K=function(e,n){for(var r=0;r<e.length;){if(e[r]===n)return!0;r+=1}return!1},V="function"!=typeof Object.keys||Q?c((function(e){if(Object(e)!==e)return[];var n,r,t=[],o=Q&&I(e);for(n in e)!N(n,e)||o&&"length"===n||(t[t.length]=n);if(j)for(r=P.length-1;r>=0;)N(n=P[r],e)&&!K(t,n)&&(t[t.length]=n),r-=1;return t})):c((function(e){return Object(e)!==e?[]:Object.keys(e)})),W=a(S(["fantasy-land/map","map"],w,(function(e,n){switch(Object.prototype.toString.call(n)){case"[object Function]":return l(n.length,(function(){return e.call(this,n.apply(this,arguments))}));case"[object Object]":return k((function(r,t){return r[t]=e(n[t]),r}),{},V(n));default:return D(e,n)}}))),_=Number.isInteger||function(e){return e<<0===e},q=a((function(e,n){var r=e<0?n.length+e:e;return E(n)?n.charAt(r):n[r]})),H=a((function(e,n){return e.map((function(e){for(var r,t=n,o=0;o<e.length;){if(null==t)return;r=e[o],t=_(r)?q(r,t):t[r],o+=1}return t}))})),Y=a((function(e,n){return H([e],n)[0]})),z=a((function(e,n){return Y([e],n)})),$=a((function(e,n){return W(z(e),n)})),X=m(k),Z=c((function(e){return l(X(F,0,$("length",e)),(function(){for(var n=0,r=e.length;n<r;){if(!e[n].apply(this,arguments))return!1;n+=1}return!0}))})),ee=c((function(e){return function(){return e}})),ne=a((function(e,n){return e&&n})),re=function(){function e(e,n){this.xf=n,this.f=e,this.any=!1}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){return this.any||(e=this.xf["@@transducer/step"](e,!1)),this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,n){return this.f(n)&&(this.any=!0,e=y(this.xf["@@transducer/step"](e,!0))),e},e}(),te=a(S(["any"],a((function(e,n){return new re(e,n)})),(function(e,n){for(var r=0;r<n.length;){if(e(n[r]))return!0;r+=1}return!1}))),oe=c((function(e){return l(X(F,0,$("length",e)),(function(){for(var n=0,r=e.length;n<r;){if(e[n].apply(this,arguments))return!0;n+=1}return!1}))})),ie=a((function(e,n){return"function"==typeof n["fantasy-land/ap"]?n["fantasy-land/ap"](e):"function"==typeof e.ap?e.ap(n):"function"==typeof e?function(r){return e(r)(n(r))}:k((function(e,r){return d(e,W(r,n))}),[],e)}));function ue(e,n){for(var r=0,t=n.length-(e-1),o=new Array(t>=0?t:0);r<t;)o[r]=Array.prototype.slice.call(n,r,r+e),r+=1;return o}var ce=function(){function e(e,n){this.xf=n,this.pos=0,this.full=!1,this.acc=new Array(e)}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){return this.acc=null,this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,n){return this.store(n),this.full?this.xf["@@transducer/step"](e,this.getCopy()):e},e.prototype.store=function(e){this.acc[this.pos]=e,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},e.prototype.getCopy=function(){return d(Array.prototype.slice.call(this.acc,this.pos),Array.prototype.slice.call(this.acc,0,this.pos))},e}(),ae=a(S([],a((function(e,n){return new ce(e,n)})),ue)),se=a((function(e,n){return d(n,[e])})),de=a((function(e,n){return e.apply(this,n)})),fe=c((function(e){for(var n=V(e),r=n.length,t=[],o=0;o<r;)t[o]=e[n[o]],o+=1;return t}));function Ce(e,n){return V(n).reduce((function(r,t){return r[t]=e(n[t]),r}),{})}var le=c((function e(n){return n=Ce((function(n){return"function"==typeof n?n:e(n)}),n),l(X(F,0,$("length",fe(n))),(function(){var e=arguments;return Ce((function(n){return de(n,e)}),n)}))})),pe=a((function(e,n){return n(e)})),me=m((function(e,n,r){var t=e(n),o=e(r);return t<o?-1:t>o?1:0})),ve=m((function(e,n,r){var t={};for(var o in r)t[o]=r[o];return t[e]=n,t})),he=c((function(e){return null==e})),Ue=m((function e(n,r,t){if(0===n.length)return r;var o=n[0];if(n.length>1){var i=!he(t)&&N(o,t)?t[o]:_(n[1])?[]:{};r=e(Array.prototype.slice.call(n,1),r,i)}if(_(o)&&h(t)){var u=[].concat(t);return u[o]=r,u}return ve(o,r,t)})),Se=a((function(e,n){switch(e){case 0:return function(){return n.call(this)};case 1:return function(e){return n.call(this,e)};case 2:return function(e,r){return n.call(this,e,r)};case 3:return function(e,r,t){return n.call(this,e,r,t)};case 4:return function(e,r,t,o){return n.call(this,e,r,t,o)};case 5:return function(e,r,t,o,i){return n.call(this,e,r,t,o,i)};case 6:return function(e,r,t,o,i,u){return n.call(this,e,r,t,o,i,u)};case 7:return function(e,r,t,o,i,u,c){return n.call(this,e,r,t,o,i,u,c)};case 8:return function(e,r,t,o,i,u,c,a){return n.call(this,e,r,t,o,i,u,c,a)};case 9:return function(e,r,t,o,i,u,c,a,s){return n.call(this,e,r,t,o,i,u,c,a,s)};case 10:return function(e,r,t,o,i,u,c,a,s,d){return n.call(this,e,r,t,o,i,u,c,a,s,d)};default:throw new Error("First argument to nAry must be a non-negative integer no greater than ten")}})),ye=c((function(e){return Se(2,e)}));function Te(e){var n=Object.prototype.toString.call(e);return"[object Function]"===n||"[object AsyncFunction]"===n||"[object GeneratorFunction]"===n||"[object AsyncGeneratorFunction]"===n}var ge=a((function(e,n){var r=l(e,n);return l(e,(function(){return k(ie,W(r,arguments[0]),Array.prototype.slice.call(arguments,1))}))})),Ae=c((function(e){return ge(e.length,e)})),Fe=a((function(e,n){return Te(e)?function(){return e.apply(this,arguments)&&n.apply(this,arguments)}:Ae(ne)(e,n)})),De=c((function(e){return l(e.length,e)})),Ee=De((function(e){return e.apply(this,Array.prototype.slice.call(arguments,1))}));function Be(e){return function n(r){for(var t,o,i,u=[],c=0,a=r.length;c<a;){if(B(r[c]))for(i=0,o=(t=e?n(r[c]):r[c]).length;i<o;)u[u.length]=t[i],i+=1;else u[u.length]=r[c];c+=1}return u}}var Le=function(e){var n=function(e){return{"@@transducer/init":T.init,"@@transducer/result":function(n){return e["@@transducer/result"](n)},"@@transducer/step":function(n,r){var t=e["@@transducer/step"](n,r);return t["@@transducer/reduced"]?{"@@transducer/value":t,"@@transducer/reduced":!0}:t}}}(e);return{"@@transducer/init":T.init,"@@transducer/result":function(e){return n["@@transducer/result"](e)},"@@transducer/step":function(e,r){return B(r)?k(n,e,r):k(n,e,[r])}}},Oe=a(S(["fantasy-land/chain","chain"],a((function(e,n){return W(e,Le(n))})),(function(e,n){return"function"==typeof n?function(r){return e(n(r))(r)}:Be(!1)(W(e,n))}))),Me=m((function(e,n,r){if(e>n)throw new Error("min must not be greater than max in clamp(min, max, value)");return r<e?e:r>n?n:r}));function be(e){return new RegExp(e.source,(e.global?"g":"")+(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.sticky?"y":"")+(e.unicode?"u":""))}var xe=c((function(e){return null===e?"Null":void 0===e?"Undefined":Object.prototype.toString.call(e).slice(8,-1)}));function Re(e,n,r,t){var o=function(o){for(var i=n.length,u=0;u<i;){if(e===n[u])return r[u];u+=1}for(var c in n[u+1]=e,r[u+1]=o,e)o[c]=t?Re(e[c],n,r,!0):e[c];return o};switch(xe(e)){case"Object":return o({});case"Array":return o([]);case"Date":return new Date(e.valueOf());case"RegExp":return be(e);default:return e}}var ke=c((function(e){return null!=e&&"function"==typeof e.clone?e.clone():Re(e,[],[],!0)})),Ge=c((function(e){return function(n,r){return e(n,r)?-1:e(r,n)?1:0}})),we=c((function(e){return!e})),Ne=Ae(we);function Je(e,n){return function(){return n.call(this,e.apply(this,arguments))}}function Ie(e,n){return function(){var r=arguments.length;if(0===r)return n();var t=arguments[r-1];return h(t)||"function"!=typeof t[e]?n.apply(this,arguments):t[e].apply(t,Array.prototype.slice.call(arguments,0,r-1))}}var je=m(Ie("slice",(function(e,n,r){return Array.prototype.slice.call(r,e,n)}))),Pe=c(Ie("tail",je(1,1/0)));function Qe(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return f(arguments[0].length,X(Je,arguments[0],Pe(arguments)))}var Ke=c((function(e){return E(e)?e.split("").reverse().join(""):Array.prototype.slice.call(e,0).reverse()}));function Ve(){if(0===arguments.length)throw new Error("compose requires at least one argument");return Qe.apply(this,Ke(arguments))}function We(){if(0===arguments.length)throw new Error("composeK requires at least one argument");var e=Array.prototype.slice.call(arguments),n=e.pop();return Ve(Ve.apply(this,W(Oe,e)),n)}function _e(e,n){return function(){var r=this;return e.apply(r,arguments).then((function(e){return n.call(r,e)}))}}function qe(){if(0===arguments.length)throw new Error("pipeP requires at least one argument");return f(arguments[0].length,X(_e,arguments[0],Pe(arguments)))}function He(){if(0===arguments.length)throw new Error("composeP requires at least one argument");return qe.apply(this,Ke(arguments))}var Ye=q(0);function ze(e){return e}var $e=c(ze),Xe=a((function(e,n){if(n.length<=0)return $e;var r=Ye(n),t=Pe(n);return f(r.length,(function(){return k((function(n,r){return e.call(this,r,n)}),r.apply(this,arguments),t)}))})),Ze=a((function(e,n){return Xe.apply(this,[e,Ke(n)])}));function en(e){for(var n,r=[];!(n=e.next()).done;)r.push(n.value);return r}function nn(e,n,r){for(var t=0,o=r.length;t<o;){if(e(n,r[t]))return!0;t+=1}return!1}var rn="function"==typeof Object.is?Object.is:function(e,n){return e===n?0!==e||1/e==1/n:e!=e&&n!=n};function tn(e,n,r,t){var o=en(e);function i(e,n){return on(e,n,r.slice(),t.slice())}return!nn((function(e,n){return!nn(i,n,e)}),en(n),o)}function on(e,n,r,t){if(rn(e,n))return!0;var o=xe(e);if(o!==xe(n))return!1;if(null==e||null==n)return!1;if("function"==typeof e["fantasy-land/equals"]||"function"==typeof n["fantasy-land/equals"])return"function"==typeof e["fantasy-land/equals"]&&e["fantasy-land/equals"](n)&&"function"==typeof n["fantasy-land/equals"]&&n["fantasy-land/equals"](e);if("function"==typeof e.equals||"function"==typeof n.equals)return"function"==typeof e.equals&&e.equals(n)&&"function"==typeof n.equals&&n.equals(e);switch(o){case"Arguments":case"Array":case"Object":if("function"==typeof e.constructor&&"Promise"===function(e){var n=String(e).match(/^function (\w*)/);return null==n?"":n[1]}(e.constructor))return e===n;break;case"Boolean":case"Number":case"String":if(typeof e!=typeof n||!rn(e.valueOf(),n.valueOf()))return!1;break;case"Date":if(!rn(e.valueOf(),n.valueOf()))return!1;break;case"Error":return e.name===n.name&&e.message===n.message;case"RegExp":if(e.source!==n.source||e.global!==n.global||e.ignoreCase!==n.ignoreCase||e.multiline!==n.multiline||e.sticky!==n.sticky||e.unicode!==n.unicode)return!1}for(var i=r.length-1;i>=0;){if(r[i]===e)return t[i]===n;i-=1}switch(o){case"Map":return e.size===n.size&&tn(e.entries(),n.entries(),r.concat([e]),t.concat([n]));case"Set":return e.size===n.size&&tn(e.values(),n.values(),r.concat([e]),t.concat([n]));case"Arguments":case"Array":case"Object":case"Boolean":case"Number":case"String":case"Date":case"Error":case"RegExp":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"ArrayBuffer":break;default:return!1}var u=V(e);if(u.length!==V(n).length)return!1;var c=r.concat([e]),a=t.concat([n]);for(i=u.length-1;i>=0;){var s=u[i];if(!N(s,n)||!on(n[s],e[s],c,a))return!1;i-=1}return!0}var un=a((function(e,n){return on(e,n,[],[])}));function cn(e,n,r){var t,o;if("function"==typeof e.indexOf)switch(typeof n){case"number":if(0===n){for(t=1/n;r<e.length;){if(0===(o=e[r])&&1/o===t)return r;r+=1}return-1}if(n!=n){for(;r<e.length;){if("number"==typeof(o=e[r])&&o!=o)return r;r+=1}return-1}return e.indexOf(n,r);case"string":case"boolean":case"function":case"undefined":return e.indexOf(n,r);case"object":if(null===n)return e.indexOf(n,r)}for(;r<e.length;){if(un(e[r],n))return r;r+=1}return-1}function an(e,n){return cn(n,e,0)>=0}function sn(e){return'"'+e.replace(/\\/g,"\\\\").replace(/[\b]/g,"\\b").replace(/\f/g,"\\f").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t").replace(/\v/g,"\\v").replace(/\0/g,"\\0").replace(/"/g,'\\"')+'"'}var dn=function(e){return(e<10?"0":"")+e},fn="function"==typeof Date.prototype.toISOString?function(e){return e.toISOString()}:function(e){return e.getUTCFullYear()+"-"+dn(e.getUTCMonth()+1)+"-"+dn(e.getUTCDate())+"T"+dn(e.getUTCHours())+":"+dn(e.getUTCMinutes())+":"+dn(e.getUTCSeconds())+"."+(e.getUTCMilliseconds()/1e3).toFixed(3).slice(2,5)+"Z"};function Cn(e){return function(){return!e.apply(this,arguments)}}function ln(e,n){for(var r=0,t=n.length,o=[];r<t;)e(n[r])&&(o[o.length]=n[r]),r+=1;return o}function pn(e){return"[object Object]"===Object.prototype.toString.call(e)}var mn=function(){function e(e,n){this.xf=n,this.f=e}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=T.result,e.prototype["@@transducer/step"]=function(e,n){return this.f(n)?this.xf["@@transducer/step"](e,n):e},e}(),vn=a(S(["filter"],a((function(e,n){return new mn(e,n)})),(function(e,n){return pn(n)?k((function(r,t){return e(n[t])&&(r[t]=n[t]),r}),{},V(n)):ln(e,n)}))),hn=a((function(e,n){return vn(Cn(e),n)}));function Un(e,n){var r=function(r){var t=n.concat([e]);return an(r,t)?"<Circular>":Un(r,t)},t=function(e,n){return D((function(n){return sn(n)+": "+r(e[n])}),n.slice().sort())};switch(Object.prototype.toString.call(e)){case"[object Arguments]":return"(function() { return arguments; }("+D(r,e).join(", ")+"))";case"[object Array]":return"["+D(r,e).concat(t(e,hn((function(e){return/^\d+$/.test(e)}),V(e)))).join(", ")+"]";case"[object Boolean]":return"object"==typeof e?"new Boolean("+r(e.valueOf())+")":e.toString();case"[object Date]":return"new Date("+(isNaN(e.valueOf())?r(NaN):sn(fn(e)))+")";case"[object Null]":return"null";case"[object Number]":return"object"==typeof e?"new Number("+r(e.valueOf())+")":1/e==-1/0?"-0":e.toString(10);case"[object String]":return"object"==typeof e?"new String("+r(e.valueOf())+")":sn(e);case"[object Undefined]":return"undefined";default:if("function"==typeof e.toString){var o=e.toString();if("[object Object]"!==o)return o}return"{"+t(e,V(e)).join(", ")+"}"}}var Sn=c((function(e){return Un(e,[])})),yn=a((function(e,n){if(h(e)){if(h(n))return e.concat(n);throw new TypeError(Sn(n)+" is not an array")}if(E(e)){if(E(n))return e+n;throw new TypeError(Sn(n)+" is not a string")}if(null!=e&&Te(e["fantasy-land/concat"]))return e["fantasy-land/concat"](n);if(null!=e&&Te(e.concat))return e.concat(n);throw new TypeError(Sn(e)+' does not have a method named "concat" or "fantasy-land/concat"')})),Tn=c((function(e){return f(X(F,0,W((function(e){return e[0].length}),e)),(function(){for(var n=0;n<e.length;){if(e[n][0].apply(this,arguments))return e[n][1].apply(this,arguments);n+=1}}))})),gn=a((function(e,n){if(e>10)throw new Error("Constructor with greater than ten arguments");return 0===e?function(){return new n}:De(Se(e,(function(e,r,t,o,i,u,c,a,s,d){switch(arguments.length){case 1:return new n(e);case 2:return new n(e,r);case 3:return new n(e,r,t);case 4:return new n(e,r,t,o);case 5:return new n(e,r,t,o,i);case 6:return new n(e,r,t,o,i,u);case 7:return new n(e,r,t,o,i,u,c);case 8:return new n(e,r,t,o,i,u,c,a);case 9:return new n(e,r,t,o,i,u,c,a,s);case 10:return new n(e,r,t,o,i,u,c,a,s,d)}})))})),An=c((function(e){return gn(e.length,e)})),Fn=a(an),Dn=a((function(e,n){return l(X(F,0,$("length",n)),(function(){var r=arguments,t=this;return e.apply(t,D((function(e){return e.apply(t,r)}),n))}))})),En=function(){function e(e,n,r,t){this.valueFn=e,this.valueAcc=n,this.keyFn=r,this.xf=t,this.inputs={}}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){var n;for(n in this.inputs)if(N(n,this.inputs)&&(e=this.xf["@@transducer/step"](e,this.inputs[n]))["@@transducer/reduced"]){e=e["@@transducer/value"];break}return this.inputs=null,this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,n){var r=this.keyFn(n);return this.inputs[r]=this.inputs[r]||[r,this.valueAcc],this.inputs[r][1]=this.valueFn(this.inputs[r][1],n),e},e}(),Bn=C(4,[],S([],C(4,[],(function(e,n,r,t){return new En(e,n,r,t)})),(function(e,n,r,t){return k((function(t,o){var i=r(o);return t[i]=e(N(i,t)?t[i]:Re(n,[],[],!1),o),t}),{},t)}))),Ln=Bn((function(e,n){return e+1}),0),On=s(-1),Mn=a((function(e,n){return null==n||n!=n?e:n})),bn=m((function(e,n,r){var t=e(n),o=e(r);return t>o?-1:t<o?1:0}));function xn(e,n,r){var t,o=typeof e;switch(o){case"string":case"number":return 0===e&&1/e==-1/0?!!r._items["-0"]||(n&&(r._items["-0"]=!0),!1):null!==r._nativeSet?n?(t=r._nativeSet.size,r._nativeSet.add(e),r._nativeSet.size===t):r._nativeSet.has(e):o in r._items?e in r._items[o]||(n&&(r._items[o][e]=!0),!1):(n&&(r._items[o]={},r._items[o][e]=!0),!1);case"boolean":if(o in r._items){var i=e?1:0;return!!r._items[o][i]||(n&&(r._items[o][i]=!0),!1)}return n&&(r._items[o]=e?[!1,!0]:[!0,!1]),!1;case"function":return null!==r._nativeSet?n?(t=r._nativeSet.size,r._nativeSet.add(e),r._nativeSet.size===t):r._nativeSet.has(e):o in r._items?!!an(e,r._items[o])||(n&&r._items[o].push(e),!1):(n&&(r._items[o]=[e]),!1);case"undefined":return!!r._items[o]||(n&&(r._items[o]=!0),!1);case"object":if(null===e)return!!r._items.null||(n&&(r._items.null=!0),!1);default:return(o=Object.prototype.toString.call(e))in r._items?!!an(e,r._items[o])||(n&&r._items[o].push(e),!1):(n&&(r._items[o]=[e]),!1)}}var Rn=function(){function e(){this._nativeSet="function"==typeof Set?new Set:null,this._items={}}return e.prototype.add=function(e){return!xn(e,!0,this)},e.prototype.has=function(e){return xn(e,!1,this)},e}(),kn=a((function(e,n){for(var r=[],t=0,o=e.length,i=n.length,u=new Rn,c=0;c<i;c+=1)u.add(n[c]);for(;t<o;)u.add(e[t])&&(r[r.length]=e[t]),t+=1;return r})),Gn=m((function(e,n,r){for(var t=[],o=0,i=n.length;o<i;)nn(e,n[o],r)||nn(e,n[o],t)||t.push(n[o]),o+=1;return t})),wn=a((function(e,n){var r={};for(var t in n)r[t]=n[t];return delete r[e],r})),Nn=m((function(e,n,r){var t=Array.prototype.slice.call(r,0);return t.splice(e,n),t})),Jn=m((function(e,n,r){return v(e,ee(n),r)})),In=a((function e(n,r){switch(n.length){case 0:return r;case 1:return _(n[0])&&h(r)?Nn(n[0],1,r):wn(n[0],r);default:var t=n[0],o=Array.prototype.slice.call(n,1);return null==r[t]?r:_(t)&&h(r)?Jn(t,e(o,r[t]),r):ve(t,e(o,r[t]),r)}})),jn=a((function(e,n){return e/n})),Pn=function(){function e(e,n){this.xf=n,this.n=e}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=T.result,e.prototype["@@transducer/step"]=function(e,n){return this.n>0?(this.n-=1,e):this.xf["@@transducer/step"](e,n)},e}(),Qn=a(S(["drop"],a((function(e,n){return new Pn(e,n)})),(function(e,n){return je(Math.max(0,e),1/0,n)}))),Kn=function(){function e(e,n){this.xf=n,this.n=e,this.i=0}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=T.result,e.prototype["@@transducer/step"]=function(e,n){this.i+=1;var r=0===this.n?e:this.xf["@@transducer/step"](e,n);return this.n>=0&&this.i>=this.n?y(r):r},e}(),Vn=a(S(["take"],a((function(e,n){return new Kn(e,n)})),(function(e,n){return je(0,e<0?1/0:e,n)})));function Wn(e,n){return Vn(e<n.length?n.length-e:0,n)}var _n=function(){function e(e,n){this.xf=n,this.pos=0,this.full=!1,this.acc=new Array(e)}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){return this.acc=null,this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,n){return this.full&&(e=this.xf["@@transducer/step"](e,this.acc[this.pos])),this.store(n),e},e.prototype.store=function(e){this.acc[this.pos]=e,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},e}(),qn=a(S([],a((function(e,n){return new _n(e,n)})),Wn));function Hn(e,n){for(var r=n.length-1;r>=0&&e(n[r]);)r-=1;return je(0,r+1,n)}var Yn=function(){function e(e,n){this.f=e,this.retained=[],this.xf=n}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){return this.retained=null,this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,n){return this.f(n)?this.retain(e,n):this.flush(e,n)},e.prototype.flush=function(e,n){return e=k(this.xf["@@transducer/step"],e,this.retained),this.retained=[],this.xf["@@transducer/step"](e,n)},e.prototype.retain=function(e,n){return this.retained.push(n),e},e}(),zn=a(S([],a((function(e,n){return new Yn(e,n)})),Hn)),$n=function(){function e(e,n){this.xf=n,this.pred=e,this.lastValue=void 0,this.seenFirstValue=!1}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=T.result,e.prototype["@@transducer/step"]=function(e,n){var r=!1;return this.seenFirstValue?this.pred(this.lastValue,n)&&(r=!0):this.seenFirstValue=!0,this.lastValue=n,r?e:this.xf["@@transducer/step"](e,n)},e}(),Xn=a((function(e,n){return new $n(e,n)})),Zn=q(-1),er=a(S([],Xn,(function(e,n){var r=[],t=1,o=n.length;if(0!==o)for(r[0]=n[0];t<o;)e(Zn(r),n[t])||(r[r.length]=n[t]),t+=1;return r}))),nr=c(S([],Xn(un),er(un))),rr=function(){function e(e,n){this.xf=n,this.f=e}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=T.result,e.prototype["@@transducer/step"]=function(e,n){if(this.f){if(this.f(n))return e;this.f=null}return this.xf["@@transducer/step"](e,n)},e}(),tr=a(S(["dropWhile"],a((function(e,n){return new rr(e,n)})),(function(e,n){for(var r=0,t=n.length;r<t&&e(n[r]);)r+=1;return je(r,1/0,n)}))),or=a((function(e,n){return e||n})),ir=a((function(e,n){return Te(e)?function(){return e.apply(this,arguments)||n.apply(this,arguments)}:Ae(or)(e,n)})),ur=c((function(e){return null!=e&&"function"==typeof e["fantasy-land/empty"]?e["fantasy-land/empty"]():null!=e&&null!=e.constructor&&"function"==typeof e.constructor["fantasy-land/empty"]?e.constructor["fantasy-land/empty"]():null!=e&&"function"==typeof e.empty?e.empty():null!=e&&null!=e.constructor&&"function"==typeof e.constructor.empty?e.constructor.empty():h(e)?[]:E(e)?"":pn(e)?{}:I(e)?function(){return arguments}():void 0})),cr=a((function(e,n){return Qn(e>=0?n.length-e:0,n)})),ar=a((function(e,n){return un(cr(e.length,n),e)})),sr=m((function(e,n,r){return un(e(n),e(r))})),dr=m((function(e,n,r){return un(n[e],r[e])})),fr=a((function e(n,r){var t,o,i,u=r instanceof Array?[]:{};for(o in r)i=typeof(t=n[o]),u[o]="function"===i?t(r[o]):t&&"object"===i?e(t,r[o]):r[o];return u})),Cr=function(){function e(e,n){this.xf=n,this.f=e,this.found=!1}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){return this.found||(e=this.xf["@@transducer/step"](e,void 0)),this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,n){return this.f(n)&&(this.found=!0,e=y(this.xf["@@transducer/step"](e,n))),e},e}(),lr=a(S(["find"],a((function(e,n){return new Cr(e,n)})),(function(e,n){for(var r=0,t=n.length;r<t;){if(e(n[r]))return n[r];r+=1}}))),pr=function(){function e(e,n){this.xf=n,this.f=e,this.idx=-1,this.found=!1}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){return this.found||(e=this.xf["@@transducer/step"](e,-1)),this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,n){return this.idx+=1,this.f(n)&&(this.found=!0,e=y(this.xf["@@transducer/step"](e,this.idx))),e},e}(),mr=a(S([],a((function(e,n){return new pr(e,n)})),(function(e,n){for(var r=0,t=n.length;r<t;){if(e(n[r]))return r;r+=1}return-1}))),vr=function(){function e(e,n){this.xf=n,this.f=e}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){return this.xf["@@transducer/result"](this.xf["@@transducer/step"](e,this.last))},e.prototype["@@transducer/step"]=function(e,n){return this.f(n)&&(this.last=n),e},e}(),hr=a(S([],a((function(e,n){return new vr(e,n)})),(function(e,n){for(var r=n.length-1;r>=0;){if(e(n[r]))return n[r];r-=1}}))),Ur=function(){function e(e,n){this.xf=n,this.f=e,this.idx=-1,this.lastIdx=-1}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=function(e){return this.xf["@@transducer/result"](this.xf["@@transducer/step"](e,this.lastIdx))},e.prototype["@@transducer/step"]=function(e,n){return this.idx+=1,this.f(n)&&(this.lastIdx=this.idx),e},e}(),Sr=a(S([],a((function(e,n){return new Ur(e,n)})),(function(e,n){for(var r=n.length-1;r>=0;){if(e(n[r]))return r;r-=1}return-1}))),yr=c(Be(!0)),Tr=c((function(e){return l(e.length,(function(n,r){var t=Array.prototype.slice.call(arguments,0);return t[0]=r,t[1]=n,e.apply(this,t)}))})),gr=a(Ie("forEach",(function(e,n){for(var r=n.length,t=0;t<r;)e(n[t]),t+=1;return n}))),Ar=a((function(e,n){for(var r=V(n),t=0;t<r.length;){var o=r[t];e(n[o],o,n),t+=1}return n})),Fr=c((function(e){for(var n={},r=0;r<e.length;)n[e[r][0]]=e[r][1],r+=1;return n})),Dr=a(Ie("groupBy",Bn((function(e,n){return null==e&&(e=[]),e.push(n),e}),null))),Er=a((function(e,n){for(var r=[],t=0,o=n.length;t<o;){for(var i=t+1;i<o&&e(n[i-1],n[i]);)i+=1;r.push(n.slice(t,i)),t=i}return r})),Br=a((function(e,n){return e>n})),Lr=a((function(e,n){return e>=n})),Or=a((function(e,n){if(0===e.length||he(n))return!1;for(var r=n,t=0;t<e.length;){if(he(r)||!N(e[t],r))return!1;r=r[e[t]],t+=1}return!0})),Mr=a((function(e,n){return Or([e],n)})),br=a((function(e,n){return e in n})),xr=a(rn),Rr=m((function(e,n,r){return l(Math.max(e.length,n.length,r.length),(function(){return e.apply(this,arguments)?n.apply(this,arguments):r.apply(this,arguments)}))})),kr=s(1),Gr=a(an),wr=Bn((function(e,n){return n}),null),Nr=a((function(e,n){return"function"!=typeof n.indexOf||h(n)?cn(n,e,0):n.indexOf(e)})),Jr=je(0,-1),Ir=m((function(e,n,r){return ln((function(n){return nn(e,n,r)}),n)})),jr=m((function(e,n,r){e=e<r.length&&e>=0?e:r.length;var t=Array.prototype.slice.call(r,0);return t.splice(e,0,n),t})),Pr=m((function(e,n,r){return e=e<r.length&&e>=0?e:r.length,[].concat(Array.prototype.slice.call(r,0,e),n,Array.prototype.slice.call(r,e))})),Qr=a((function(e,n){for(var r,t,o=new Rn,i=[],u=0;u<n.length;)r=e(t=n[u]),o.add(r)&&i.push(t),u+=1;return i})),Kr=Qr($e),Vr=a((function(e,n){var r,t;return e.length>n.length?(r=e,t=n):(r=n,t=e),Kr(ln(Tr(an)(r),t))})),Wr=a(Ie("intersperse",(function(e,n){for(var r=[],t=0,o=n.length;t<o;)t===o-1?r.push(n[t]):r.push(n[t],e),t+=1;return r})));var _r="function"==typeof Object.assign?Object.assign:function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(e),r=1,t=arguments.length;r<t;){var o=arguments[r];if(null!=o)for(var i in o)N(i,o)&&(n[i]=o[i]);r+=1}return n},qr=a((function(e,n){var r={};return r[e]=n,r})),Hr={"@@transducer/init":Array,"@@transducer/step":function(e,n){return e.push(n),e},"@@transducer/result":ze},Yr={"@@transducer/init":String,"@@transducer/step":function(e,n){return e+n},"@@transducer/result":ze},zr={"@@transducer/init":Object,"@@transducer/step":function(e,n){return _r(e,B(n)?qr(n[0],n[1]):n)},"@@transducer/result":ze};var $r=m((function(e,n,r){return U(e)?k(n(e),e["@@transducer/init"](),r):k(n(function(e){if(U(e))return e;if(B(e))return Hr;if("string"==typeof e)return Yr;if("object"==typeof e)return zr;throw new Error("Cannot create transformer for "+e)}(e)),Re(e,[],[],!1),r)})),Xr=c((function(e){for(var n=V(e),r=n.length,t=0,o={};t<r;){var i=n[t],u=e[i],c=N(u,o)?o[u]:o[u]=[];c[c.length]=i,t+=1}return o})),Zr=c((function(e){for(var n=V(e),r=n.length,t=0,o={};t<r;){var i=n[t];o[e[i]]=i,t+=1}return o})),et=a((function(e,n){return l(e+1,(function(){var r=arguments[e];if(null!=r&&Te(r[n]))return r[n].apply(r,Array.prototype.slice.call(arguments,0,e));throw new TypeError(Sn(r)+' does not have a method named "'+n+'"')}))})),nt=a((function(e,n){return null!=n&&n.constructor===e||n instanceof e})),rt=c((function(e){return null!=e&&un(e,ur(e))})),tt=et(1,"join"),ot=c((function(e){return Dn((function(){return Array.prototype.slice.call(arguments,0)}),e)})),it=c((function(e){var n,r=[];for(n in e)r[r.length]=n;return r})),ut=a((function(e,n){if("function"!=typeof n.lastIndexOf||h(n)){for(var r=n.length-1;r>=0;){if(un(n[r],e))return r;r-=1}return-1}return n.lastIndexOf(e)}));function ct(e){return"[object Number]"===Object.prototype.toString.call(e)}var at=c((function(e){return null!=e&&ct(e.length)?e.length:NaN})),st=a((function(e,n){return function(r){return function(t){return W((function(e){return n(e,t)}),r(e(t)))}}})),dt=c((function(e){return st(q(e),Jn(e))})),ft=c((function(e){return st(Y(e),Ue(e))})),Ct=c((function(e){return st(z(e),ve(e))})),lt=a((function(e,n){return e<n})),pt=a((function(e,n){return e<=n})),mt=m((function(e,n,r){for(var t=0,o=r.length,i=[],u=[n];t<o;)u=e(u[0],r[t]),i[t]=u[1],t+=1;return[u[0],i]})),vt=m((function(e,n,r){for(var t=r.length-1,o=[],i=[n];t>=0;)i=e(i[0],r[t]),o[t]=i[1],t-=1;return[i[0],o]})),ht=a((function(e,n){return k((function(r,t){return r[t]=e(n[t],t,n),r}),{},V(n))})),Ut=a((function(e,n){return n.match(e)||[]})),St=a((function(e,n){return _(e)?!_(n)||n<1?NaN:(e%n+n)%n:NaN})),yt=m((function(e,n,r){return e(r)>e(n)?r:n})),Tt=X(s,0),gt=c((function(e){return Tt(e)/e.length})),At=c((function(e){var n=e.length;if(0===n)return NaN;var r=2-n%2,t=(n-r)/2;return gt(Array.prototype.slice.call(e,0).sort((function(e,n){return e<n?-1:e>n?1:0})).slice(t,t+r))})),Ft=a((function(e,n){var r={};return f(n.length,(function(){var t=e.apply(this,arguments);return N(t,r)||(r[t]=n.apply(this,arguments)),r[t]}))})),Dt=a((function(e,n){return _r({},e,n)})),Et=c((function(e){return _r.apply(null,[{}].concat(e))})),Bt=m((function(e,n,r){var t,o={};for(t in n)N(t,n)&&(o[t]=N(t,r)?e(t,n[t],r[t]):n[t]);for(t in r)N(t,r)&&!N(t,o)&&(o[t]=r[t]);return o})),Lt=m((function e(n,r,t){return Bt((function(r,t,o){return pn(t)&&pn(o)?e(n,t,o):n(r,t,o)}),r,t)})),Ot=a((function(e,n){return Lt((function(e,n,r){return n}),e,n)})),Mt=a((function(e,n){return Lt((function(e,n,r){return r}),e,n)})),bt=m((function(e,n,r){return Lt((function(n,r,t){return e(r,t)}),n,r)})),xt=a((function(e,n){return _r({},n,e)})),Rt=a((function(e,n){return _r({},e,n)})),kt=m((function(e,n,r){return Bt((function(n,r,t){return e(r,t)}),n,r)})),Gt=a((function(e,n){return n<e?n:e})),wt=m((function(e,n,r){return e(r)<e(n)?r:n})),Nt=a((function(e,n){return e%n})),Jt=m((function(e,n,r){var t=r.length,o=r.slice(),i=e<0?t+e:e,u=n<0?t+n:n,c=o.splice(i,1);return i<0||i>=r.length||u<0||u>=r.length?r:[].concat(o.slice(0,u)).concat(c).concat(o.slice(u,r.length))})),It=a((function(e,n){return e*n})),jt=c((function(e){return-e})),Pt=a((function(e,n){return A(Cn(e),n)})),Qt=c((function(e){return l(e<0?1:e+1,(function(){return q(e,arguments)}))})),Kt=m((function(e,n,r){return e(n(r))}));function Vt(e){return[e]}var Wt=c(Vt),_t=a((function(e,n){for(var r={},t={},o=0,i=e.length;o<i;)t[e[o]]=1,o+=1;for(var u in n)t.hasOwnProperty(u)||(r[u]=n[u]);return r})),qt=c((function(e){var n,r=!1;return f(e.length,(function(){return r?n:(r=!0,n=e.apply(this,arguments))}))}));function Ht(e,n){if(null==n||!Te(n.then))throw new TypeError("`"+e+"` expected a Promise, received "+Un(n,[]))}var Yt=a((function(e,n){return Ht("otherwise",n),n.then(null,e)})),zt=function(e){return{value:e,map:function(n){return zt(n(e))}}},$t=m((function(e,n,r){return e((function(e){return zt(n(e))}))(r).value})),Xt=a((function(e,n){return[e,n]}));function Zt(e){return a((function(n,r){return f(Math.max(0,n.length-r.length),(function(){return n.apply(this,e(r,arguments))}))}))}var eo=Zt(d),no=Zt(Tr(d)),ro=ot([vn,hn]),to=m((function(e,n,r){return un(Y(e,r),n)})),oo=m((function(e,n,r){return Mn(e,Y(n,r))})),io=m((function(e,n,r){return e(Y(n,r))})),uo=a((function(e,n){for(var r={},t=0;t<e.length;)e[t]in n&&(r[e[t]]=n[e[t]]),t+=1;return r})),co=a((function(e,n){for(var r={},t=0,o=e.length;t<o;){var i=e[t];r[i]=n[i],t+=1}return r})),ao=a((function(e,n){var r={};for(var t in n)e(n[t],t,n)&&(r[t]=n[t]);return r}));function so(){if(0===arguments.length)throw new Error("pipeK requires at least one argument");return We.apply(this,Ke(arguments))}var fo=a((function(e,n){return d([e],n)})),Co=X(It,1),lo=a((function(e,n){return l(n.length,(function(){for(var r=[],t=0;t<n.length;)r.push(n[t].call(this,arguments[t])),t+=1;return e.apply(this,r.concat(Array.prototype.slice.call(arguments,n.length)))}))})),po=lo(D,[co,$e]),mo=m((function(e,n,r){return un(n,r[e])})),vo=m((function(e,n,r){return nt(e,r[n])})),ho=m((function(e,n,r){return oo(e,[n],r)})),Uo=m((function(e,n,r){return e(r[n])})),So=a((function(e,n){return e.map((function(e){return Y([e],n)}))})),yo=a((function(e,n){if(!ct(e)||!ct(n))throw new TypeError("Both arguments to range must be numbers");for(var r=[],t=e;t<n;)r.push(t),t+=1;return r})),To=m((function(e,n,r){for(var t=r.length-1;t>=0;)n=e(r[t],n),t-=1;return n})),go=C(4,[],(function(e,n,r,t){return k((function(r,t){return e(r,t)?n(r,t):y(r)}),r,t)})),Ao=c(y),Fo=a((function(e,n){var r,t=Number(n),o=0;if(t<0||isNaN(t))throw new RangeError("n must be a non-negative number");for(r=new Array(t);o<t;)r[o]=e(o),o+=1;return r})),Do=a((function(e,n){return Fo(ee(e),n)})),Eo=m((function(e,n,r){return r.replace(e,n)})),Bo=m((function(e,n,r){for(var t=0,o=r.length,i=[n];t<o;)n=e(n,r[t]),i[t+1]=n,t+=1;return i})),Lo=a((function(e,n){return"function"==typeof n.sequence?n.sequence(e):To((function(e,n){return ie(W(fo,e),n)}),e([]),n)})),Oo=m((function(e,n,r){return $t(e,ee(n),r)})),Mo=a((function(e,n){return Array.prototype.slice.call(n,0).sort(e)})),bo=a((function(e,n){return Array.prototype.slice.call(n,0).sort((function(n,r){var t=e(n),o=e(r);return t<o?-1:t>o?1:0}))})),xo=a((function(e,n){return Array.prototype.slice.call(n,0).sort((function(n,r){for(var t=0,o=0;0===t&&o<e.length;)t=e[o](n,r),o+=1;return t}))})),Ro=et(1,"split"),ko=a((function(e,n){return[je(0,e,n),je(e,at(n),n)]})),Go=a((function(e,n){if(e<=0)throw new Error("First argument to splitEvery must be a positive integer");for(var r=[],t=0;t<n.length;)r.push(je(t,t+=e,n));return r})),wo=a((function(e,n){for(var r=0,t=n.length,o=[];r<t&&!e(n[r]);)o.push(n[r]),r+=1;return[o,Array.prototype.slice.call(n,r)]})),No=a((function(e,n){return un(Vn(e.length,n),e)})),Jo=a((function(e,n){return Number(e)-Number(n)})),Io=a((function(e,n){return yn(kn(e,n),kn(n,e))})),jo=m((function(e,n,r){return yn(Gn(e,n,r),Gn(e,r,n))})),Po=a((function(e,n){for(var r=n.length-1;r>=0&&e(n[r]);)r-=1;return je(r+1,1/0,n)})),Qo=function(){function e(e,n){this.xf=n,this.f=e}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=T.result,e.prototype["@@transducer/step"]=function(e,n){return this.f(n)?this.xf["@@transducer/step"](e,n):y(e)},e}(),Ko=a(S(["takeWhile"],a((function(e,n){return new Qo(e,n)})),(function(e,n){for(var r=0,t=n.length;r<t&&e(n[r]);)r+=1;return je(0,r,n)}))),Vo=function(){function e(e,n){this.xf=n,this.f=e}return e.prototype["@@transducer/init"]=T.init,e.prototype["@@transducer/result"]=T.result,e.prototype["@@transducer/step"]=function(e,n){return this.f(n),this.xf["@@transducer/step"](e,n)},e}(),Wo=a(S([],a((function(e,n){return new Vo(e,n)})),(function(e,n){return e(n),n})));var _o=a((function(e,n){if(r=e,"[object RegExp]"!==Object.prototype.toString.call(r))throw new TypeError("‘test’ requires a value of type RegExp as its first argument; received "+Sn(e));var r;return be(e).test(n)})),qo=a((function(e,n){return Ht("andThen",n),n.then(e)})),Ho=et(0,"toLowerCase"),Yo=c((function(e){var n=[];for(var r in e)N(r,e)&&(n[n.length]=[r,e[r]]);return n})),zo=c((function(e){var n=[];for(var r in e)n[n.length]=[r,e[r]];return n})),$o=et(0,"toUpperCase"),Xo=l(4,(function(e,n,r,t){return k(e("function"==typeof n?O(n):n),r,t)})),Zo=c((function(e){for(var n=0,r=[];n<e.length;){for(var t=e[n],o=0;o<t.length;)void 0===r[o]&&(r[o]=[]),r[o].push(t[o]),o+=1;n+=1}return r})),ei=m((function(e,n,r){return"function"==typeof r["fantasy-land/traverse"]?r["fantasy-land/traverse"](n,e):Lo(e,W(n,r))})),ni="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff",ri=c("function"==typeof String.prototype.trim&&!ni.trim()&&"​".trim()?function(e){return e.trim()}:function(e){var n=new RegExp("^["+ni+"]["+ni+"]*"),r=new RegExp("["+ni+"]["+ni+"]*$");return e.replace(n,"").replace(r,"")}),ti=a((function(e,n){return f(e.length,(function(){try{return e.apply(this,arguments)}catch(e){return n.apply(this,d([e],arguments))}}))})),oi=c((function(e){return function(){return e(Array.prototype.slice.call(arguments,0))}})),ii=c((function(e){return Se(1,e)})),ui=a((function(e,n){return l(e,(function(){for(var r,t=1,o=n,i=0;t<=e&&"function"==typeof o;)r=t===e?arguments.length:i+o.length,o=o.apply(this,Array.prototype.slice.call(arguments,i,r)),t+=1,i=r;return o}))})),ci=a((function(e,n){for(var r=e(n),t=[];r&&r.length;)t[t.length]=r[0],r=e(r[1]);return t})),ai=a(Ve(Kr,d)),si=a((function(e,n){for(var r,t=0,o=n.length,i=[];t<o;)nn(e,r=n[t],i)||(i[i.length]=r),t+=1;return i})),di=m((function(e,n,r){return si(e,d(n,r))})),fi=m((function(e,n,r){return e(r)?r:n(r)})),Ci=Oe(ze),li=m((function(e,n,r){for(var t=r;!e(t);)t=n(t);return t})),pi=c((function(e){var n,r=[];for(n in e)r[r.length]=e[n];return r})),mi=function(e){return{value:e,"fantasy-land/map":function(){return this}}},vi=a((function(e,n){return e(mi)(n).value})),hi=m((function(e,n,r){return e(r)?n(r):r})),Ui=a((function(e,n){for(var r in e)if(N(r,e)&&!e[r](n[r]))return!1;return!0})),Si=a((function(e,n){return Ui(W(un,e),n)})),yi=a((function(e,n){return hn(Tr(an)(e),n)})),Ti=a((function(e,n){return Boolean(!e^!n)})),gi=a((function(e,n){for(var r,t=0,o=e.length,i=n.length,u=[];t<o;){for(r=0;r<i;)u[u.length]=[e[t],n[r]],r+=1;t+=1}return u})),Ai=a((function(e,n){for(var r=[],t=0,o=Math.min(e.length,n.length);t<o;)r[t]=[e[t],n[t]],t+=1;return r})),Fi=a((function(e,n){for(var r=0,t=Math.min(e.length,n.length),o={};r<t;)o[e[r]]=n[r],r+=1;return o})),Di=m((function(e,n,r){for(var t=[],o=0,i=Math.min(n.length,r.length);o<i;)t[o]=e(n[o],r[o]),o+=1;return t})),Ei=c((function(e){return l(e.length,(function(){var n=arguments;return function(){return e.apply(this,n)}}))}))},function(e,n,r){e.exports=r(2)},function(e,n,r){r(3)()},function(e,n,r){const t=r(4),o=r(5);r(28),e.exports=()=>{const e=document.getElementById("chart"),n=e.getContext("2d"),r=e.offsetLeft,i=e.offsetTop,{cols:u,lines:c}=o();let a=[],s=void 0;t(n,{chartWidth:6600,chartHeight:1e3,gridLineColour:"rgba(29, 210, 175,0.3)",columnTitleColour:"rgb(200,0,0)",cols:u,lines:c,onDataLabelDraw:(e,n,r,t,o,i)=>{a.push({top:e,left:n,height:r,width:t,id:o,lineId:i})}}),document.addEventListener("scroll",(function(){d.style.display="none"}));const d=document.getElementById("hover");e.addEventListener("mousemove",(function(n){const t=n.pageX-r,o=n.pageY-i;d.style.display="none",e.style.cursor="auto";const u=a.find(e=>o>e.top&&o<e.top+e.height&&t>e.left&&t<e.left+e.width);u&&(e.style.cursor="pointer",d.style.display="block",d.style.top=n.pageY+10+"px",d.style.left=n.pageX+10+"px",d.innerHTML=u.id.split("-")[1])}),!1),e.addEventListener("click",(function(e){const o=e.pageX-r,f=e.pageY-i;d.style.display="none";const C=a.find(e=>f>e.top&&f<e.top+e.height&&o>e.left&&o<e.left+e.width);C&&(n.clearRect(0,0,6600,1e3),a=[],t(n,{chartWidth:6600,chartHeight:1e3,gridLineColour:"rgba(29, 210, 175,0.3)",columnTitleColour:"rgb(200,0,0)",cols:u,lines:c,onDataLabelDraw:(e,n,r,t,o,i)=>{a.push({top:e,left:n,height:r,width:t,id:o,lineId:i})},selectedLineId:C.lineId===s?void 0:C.lineId}),s=C.lineId)}),!1)}},function(e,n,r){const t=r(0);e.exports=(e,{chartWidth:n,chartHeight:r,gridLineColour:o,columnTitleColour:i,cols:u,lines:c,onDataLabelDraw:a,selectedLineId:s})=>{const d=t.pipe(t.pluck("points"),t.flatten,t.pluck("coords"),t.map(t.last),e=>Math.max.apply(null,e))(c),f=n/(u.length-1),C=r/d;function l(n,r,t,o,i,u,c){e.fillStyle=u,e.strokeStyle=c,e.beginPath(),e.moveTo(n+i,r),e.lineTo(n+t-i,r),e.quadraticCurveTo(n+t,r,n+t,r+i),e.lineTo(n+t,r+o-i),e.quadraticCurveTo(n+t,r+o,n+t-i,r+o),e.lineTo(n+i,r+o),e.quadraticCurveTo(n,r+o,n,r+o-i),e.lineTo(n,r+i),e.quadraticCurveTo(n,r,n+i,r),e.closePath(),e.stroke(),e.fill()}function p(n){const{points:r,lineColour:t}=n;e.beginPath();for(let n=0;n<r.length;n++){const{coords:o,lineId:i}=r[n];if(e.strokeStyle=s&&s!==i?"#CCC":t,e.lineWidth=s&&s===i?4:2,0===n){const n=o[0]*f+150+125,r=o[1]*C+100;e.moveTo(n,r)}else{const n=o[0]*f+150-125,r=o[1]*C+100;e.lineTo(n,r),e.stroke(),e.moveTo(n+250,r)}}e.closePath()}function m(n){const{points:r,fillColour:t,lineColour:o,textColour:i}=n;for(let n=0;n<r.length;n++){const{text:u,coords:c,lineId:d}=r[n],p=c[0]*f+150,m=c[1]*C+100;l(p-125,m-20,250,40,8,s&&s!==d?"#DDD":t,s&&s!==d?"#DDD":o);a(m-20,p-125,40,250,r[n].id,r[n].lineId),e.font="16px arial",e.fillStyle=s&&s!==d?"#FFF":i,e.textAlign="center",e.fillText(u,p,m+5)}}e.canvas.width=n+300,e.canvas.height=r+200;const v=function(e,n){let r=[];for(let t=0;t<e-1;t++){const e=(t+1)*n+150;r.push(e)}return[150,...r]}(u.length,f),h=function(e,n){let r=[];for(let t=0;t<e;t++){const o=n-(t+1)*(n/e)+100;r.push(o)}return[n+100,...r]}(d,r);!function(){for(let n=1;n<v.length-1;n++)e.strokeStyle=o,e.lineWidth=1,e.moveTo(v[n],100),e.lineTo(v[n],r+100);e.stroke()}(),function(){for(let r=1;r<h.length-1;r++)e.strokeStyle=o,e.lineWidth=1,e.moveTo(150,h[r]),e.lineTo(n+150,h[r]);e.stroke()}();for(let e=0;e<c.length;e++)p(c[e]);for(let e=0;e<c.length;e++)m(c[e]);!function(){e.font="16px arial",e.fillStyle=i,e.textAlign="left";for(let n=0;n<u.length;n++){const r=130+n*f;e.fillText(u[n],r,40)}}()}},function(e,n,r){const t=r(0),o={2e3:r(6),2001:r(7),2002:r(8),2003:r(9),2004:r(10),2005:r(11),2006:r(12),2007:r(13),2008:r(14),2009:r(15),2010:r(16),2011:r(17),2012:r(18),2013:r(19),2014:r(20),2015:r(21),2016:r(22),2017:r(23),2018:r(24),2019:r(25),2020:r(26),2021:r(27)};function i(e,n,r,u){if(void 0===o[n])return u;const c=o[n].teams,a=t.findIndex(n=>n.previousUciCode===e,c);if(a>-1){const e=c[a];return u.push({text:e.name,id:`${n}-${e.uciCode}`,colours:e.colours,coords:[r,a]}),i(e.uciCode,n+1,r+1,u)}return u}e.exports=()=>{const e=Object.keys(o),n=Object.keys(o).sort();let r=[],t={},u=1;return n.forEach((e,n)=>{const c=o[e].teams;for(let o=0;o<c.length;o++){if(t[`${n}-${o}`])continue;const a=[{text:c[o].name,id:`${e}-${c[o].uciCode}`,colours:c[o].colours,coords:[n,o]},...i(c[o].uciCode,parseInt(e,10)+1,n+1,[])];a.forEach(e=>{t[`${e.coords[0]}-${e.coords[1]}`]=!0});const s=a[a.length-1];r.push({fillColour:s.colours?s.colours[0]:"black",lineColour:s.colours?s.colours[1]:"black",textColour:s.colours?s.colours[2]:"white",points:a.map(e=>({id:e.id,text:e.text,coords:e.coords,lineId:u}))}),u++}}),{cols:e,lines:r}}},function(e){e.exports=JSON.parse('{"id":"2000","startDate":"2000-07-07","endDate":"2000-07-29","teams":[{"uciCode":"USP","previousUciCode":null,"name":"US Postal"},{"uciCode":"BAN","previousUciCode":null,"name":"Banesto"},{"uciCode":"KEL","previousUciCode":null,"name":"Kelme-Costa Blanca"},{"uciCode":"MQS","previousUciCode":null,"name":"Mapei-Quick-Step"},{"uciCode":"RAB","previousUciCode":null,"name":"Rabobank"},{"uciCode":"ONC","previousUciCode":null,"name":"ONCE-Deutsche Bank"},{"uciCode":"TEL","previousUciCode":null,"name":"Team Telekom"},{"uciCode":"MER","previousUciCode":null,"name":"Mercatone Uno-Albacom","colours":["#F9E137","#ED483F","#335176"]},{"uciCode":"A2R","previousUciCode":null,"name":"Ag2r Prévoyance"},{"uciCode":"SAE","previousUciCode":null,"name":"Saeco Macchine per Caffè","colours":["#DD433E","#2C6EBC","#FFF"]},{"uciCode":"FES","previousUciCode":null,"name":"Festina"},{"uciCode":"FAR","previousUciCode":null,"name":"Farm Frites"},{"uciCode":"COF","previousUciCode":null,"name":"Cofidis"},{"uciCode":"LOT","previousUciCode":null,"name":"Lotto-Adecco"},{"uciCode":"FDJ","previousUciCode":null,"name":"Française des Jeux"},{"uciCode":"PLT","previousUciCode":null,"name":"Team Polti","colours":["#F2ED36","#ED4843","#ED4843"]},{"uciCode":"MCJ","previousUciCode":null,"name":" Memory Card-Jack & Jones"},{"uciCode":"C.A","previousUciCode":null,"name":"Crédit Agricole"},{"uciCode":"VIN","previousUciCode":null,"name":"Vini Caldirola-Sidermec","colours":["#15193C","#AE4E99","#F6EC3F"]},{"uciCode":"BJR","previousUciCode":null,"name":"Bonjour"}]}')},function(e){e.exports=JSON.parse('{"id":"2001","startDate":"2001-07-07","endDate":"2001-07-29","teams":[{"uciCode":"USP","previousUciCode":"USP","name":"US Postal"},{"uciCode":"TEL","previousUciCode":"TEL","name":"Team Telekom"},{"uciCode":"ONC","previousUciCode":"ONC","name":"ONCE-Eroski"},{"uciCode":"FES","previousUciCode":"FES","name":"Festina","colours":["#1C1E32","#C9D535","#C9D535"]},{"uciCode":"FAS","previousUciCode":null,"name":"Fassa Bortolo"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank"},{"uciCode":"LOT","previousUciCode":"LOT","name":"Lotto-Adecco"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"MQS","previousUciCode":"MQS","name":"Mapei-Quick-Step"},{"uciCode":"BAN","previousUciCode":"BAN","name":"iBanesto.com"},{"uciCode":"C.A","previousUciCode":"C.A","name":"Crédit Agricole"},{"uciCode":"EUS","previousUciCode":null,"name":"Euskaltel-Euskadi"},{"uciCode":"A2R","previousUciCode":"A2R","name":"Ag2r Prévoyance"},{"uciCode":"CST","previousUciCode":"MCJ","name":"CSC-Tiscali"},{"uciCode":"DEL","previousUciCode":null,"name":"Jean Delatour"},{"uciCode":"KEL","previousUciCode":"KEL","name":"Kelme-Costa Blanca"},{"uciCode":"BJR","previousUciCode":"BJR","name":"Bonjour"},{"uciCode":"LAM","previousUciCode":null,"name":"Lampre-Daikin"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"Française des Jeux"},{"uciCode":"DFF","previousUciCode":"FAR","name":"Domo-Farm Frites-Latexco"},{"uciCode":"BIG","previousUciCode":null,"name":"BigMat-Auber 93","colours":["#FFF","#ED4631","#142561"]}]}')},function(e){e.exports=JSON.parse('{"id":"2002","startDate":"2002-07-06","endDate":"2002-07-28","teams":[{"uciCode":"USP","previousUciCode":"USP","name":"US Postal"},{"uciCode":"TEL","previousUciCode":"TEL","name":"Team Telekom"},{"uciCode":"ONC","previousUciCode":"ONC","name":"ONCE-Eroski"},{"uciCode":"KEL","previousUciCode":"KEL","name":"Kelme-Costa Blanca"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"CST","previousUciCode":"CST","name":"CSC-Tiscali"},{"uciCode":"C.A","previousUciCode":"C.A","name":"Crédit Agricole"},{"uciCode":"DFF","previousUciCode":"DFF","name":"Domo-Farm Frites","colours":["#FFF","#99BBEB","#2C2439"]},{"uciCode":"FAS","previousUciCode":"FAS","name":"Fassa Bortolo"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"Française des Jeux"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank"},{"uciCode":"BJR","previousUciCode":"BJR","name":"Bonjour"},{"uciCode":"MQS","previousUciCode":"MQS","name":"Mapei-Quick-Step"},{"uciCode":"BAN","previousUciCode":"BAN","name":"iBanesto.com"},{"uciCode":"LOT","previousUciCode":"LOT","name":"Lotto-Adecco"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-Daikin","colours":["#355CAB","#EB5C9D","#FFF"]},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"TAC","previousUciCode":null,"name":"Tacconi Sport"},{"uciCode":"A2R","previousUciCode":"A2R","name":"Ag2r Prévoyance"},{"uciCode":"ALS","previousUciCode":null,"name":"Alessio"},{"uciCode":"DEL","previousUciCode":"DEL","name":"Jean Delatour"}]}')},function(e){e.exports=JSON.parse('{"id":"2003","startDate":"2003-07-05","endDate":"2003-07-27","teams":[{"uciCode":"USP","previousUciCode":"USP","name":"US Postal"},{"uciCode":"ONC","previousUciCode":"ONC","name":"ONCE-Eroski"},{"uciCode":"TEL","previousUciCode":"TEL","name":"Team Telekom"},{"uciCode":"BAN","previousUciCode":"BAN","name":"iBanesto.com"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank"},{"uciCode":"SAE","previousUciCode":null,"name":"Saeco Macchine per Caffè"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"CSC","previousUciCode":"CST","name":"Team CSC"},{"uciCode":"FAS","previousUciCode":"FAS","name":"Fassa Bortolo"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"FDJeux.com"},{"uciCode":"KEL","previousUciCode":"KEL","name":"Kelme-Costa Blanca","colours":["#6CC164","#4594A3","#3A433E"]},{"uciCode":"QSD","previousUciCode":"MQS","name":"Quick Step - Davitamon"},{"uciCode":"C.A","previousUciCode":"C.A","name":"Crédit Agricole"},{"uciCode":"TBI","previousUciCode":null,"name":"Team Bianchi","colours":["#FFF","#56AEB0","#000"]},{"uciCode":"LOT","previousUciCode":"LOT","name":"Lotto-Domo"},{"uciCode":"A2R","previousUciCode":"A2R","name":"Ag2r Prévoyance"},{"uciCode":"VIN","previousUciCode":"TAC","name":"Vini Caldirola-So.Di","colours":["#ECED38","#000","#000"]},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"BLB","previousUciCode":"BJR","name":"Brioches La Boulangère"},{"uciCode":"GST","previousUciCode":null,"name":"Gerolsteiner"},{"uciCode":"ALS","previousUciCode":"ALS","name":"Alessio"},{"uciCode":"DEL","previousUciCode":"DEL","name":"Jean Delatour"}]}')},function(e){e.exports=JSON.parse('{"id":"2004","startDate":"2004-07-03","endDate":"2004-07-25","teams":[{"uciCode":"USP","previousUciCode":"USP","name":"US Postal"},{"uciCode":"TMO","previousUciCode":"TEL","name":"T-Mobile Team"},{"uciCode":"PHO","previousUciCode":null,"name":"Phonak Hearing Systems"},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"FAS","previousUciCode":"FAS","name":"Fassa Bortolo"},{"uciCode":"C.A","previousUciCode":"C.A","name":"Crédit Agricole"},{"uciCode":"CSC","previousUciCode":"CSC","name":"Team CSC"},{"uciCode":"IBA","previousUciCode":"BAN","name":"Illes Balears"},{"uciCode":"GST","previousUciCode":"GST","name":"Gerolsteiner"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis, Le Crédit par Téléphone"},{"uciCode":"QSD","previousUciCode":"QSD","name":"Quick Step - Davitamon"},{"uciCode":"LST","previousUciCode":"ONC","name":"Liberty Seguros"},{"uciCode":"BLB","previousUciCode":"BLB","name":"Brioches La Boulangère"},{"uciCode":"ALB","previousUciCode":"ALS","name":"Alessio-Bianchi","colours":["#ED4631","#292B6D","#FFF"]},{"uciCode":"A2R","previousUciCode":"A2R","name":"Ag2r Prévoyance"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"Française des Jeux"},{"uciCode":"SAE","previousUciCode":"SAE","name":"Saeco Macchine per Caffè","colours":["#DD433E","#2C6EBC","#FFF"]},{"uciCode":"LOT","previousUciCode":"LOT","name":"Lotto-Domo"},{"uciCode":"DOM","previousUciCode":null,"name":"Domina Vacanze"},{"uciCode":"RAG","previousUciCode":"DEL","name":"R.A.G.T. Semences","colours":["#FFF","#EB4530","#71DB73"]}]}')},function(e){e.exports=JSON.parse('{"id":"2005","startDate":"2005-07-02","endDate":"2005-07-24","teams":[{"uciCode":"DSC","previousUciCode":"USP","name":"Discovery Channel"},{"uciCode":"TMO","previousUciCode":"TMO","name":"T-Mobile Team"},{"uciCode":"CSC","previousUciCode":"CSC","name":"Team CSC"},{"uciCode":"IBA","previousUciCode":"IBA","name":"Illes Balears"},{"uciCode":"DVL","previousUciCode":"LOT","name":"Davitamon-Lotto"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank"},{"uciCode":"PHO","previousUciCode":"PHO","name":"Phonak"},{"uciCode":"FAS","previousUciCode":"FAS","name":"Fassa Bortolo","colours":["#0D1B3F","#0D1B3F","#FFF"]},{"uciCode":"SDV","previousUciCode":null,"name":"Saunier Duval-Prodir"},{"uciCode":"LSW","previousUciCode":"LST","name":"Liberty Seguros-Würth","colours":["#3F57A1","#95D9FC","#FFF"]},{"uciCode":"C.A","previousUciCode":"C.A","name":"Crédit Agricole"},{"uciCode":"LIQ","previousUciCode":null,"name":"Liquigas-Bianchi"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"QST","previousUciCode":"QSD","name":"Quick Step"},{"uciCode":"BTL","previousUciCode":"BLB","name":"Bouygues Télécom"},{"uciCode":"LAM","previousUciCode":null,"name":"Lampre-Caffita"},{"uciCode":"GST","previousUciCode":"GST","name":"Gerolsteiner"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"Française des Jeux"},{"uciCode":"DOM","previousUciCode":"DOM","name":"Domina Vacanze","colours":["#DDA92F","#F4966E","#1564EC"]},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"A2R","previousUciCode":"A2R","name":"AG2R"}]}')},function(e){e.exports=JSON.parse('{"id":"2006","startDate":"2006-07-01","endDate":"2006-07-23","teams":[{"uciCode":"DSC","previousUciCode":"DSC","name":"Discovery Channel"},{"uciCode":"CSC","previousUciCode":"CSC","name":"Team CSC"},{"uciCode":"TMO","previousUciCode":"TMO","name":"T-Mobile Team"},{"uciCode":"A2R","previousUciCode":"A2R","name":"AG2R Prévoyance"},{"uciCode":"GST","previousUciCode":"GST","name":"Gerolsteiner"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank"},{"uciCode":"DVL","previousUciCode":"DVL","name":"Davitamon-Lotto"},{"uciCode":"PHO","previousUciCode":"PHO","name":"Phonak","colours":["#FFF","#4C9852","#000"]},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-Fondital"},{"uciCode":"CEI","previousUciCode":"IBA","name":"Caisse d\'Epargne-Illes Balears"},{"uciCode":"QSI","previousUciCode":"QST","name":"Quick Step-Innergetic"},{"uciCode":"C.A","previousUciCode":"C.A","name":"Crédit Agricole"},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"SDV","previousUciCode":"SDV","name":"Saunier Duval-Prodir"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"Française des Jeux"},{"uciCode":"LIQ","previousUciCode":"LIQ","name":"Liquigas"},{"uciCode":"BTL","previousUciCode":"BTL","name":"Bouygues Télécom"},{"uciCode":"MRM","previousUciCode":null,"name":"Team Milram"},{"uciCode":"AGR","previousUciCode":null,"name":"Agritubel"}]}')},function(e){e.exports=JSON.parse('{"id":"2007","startDate":"2007-07-07","endDate":"2007-07-29","teams":[{"uciCode":"GCE","previousUciCode":"CEI","name":"Caisse d\'Epargne"},{"uciCode":"TMO","previousUciCode":"TMO","name":"T-Mobile Team"},{"uciCode":"CSC","previousUciCode":"CSC","name":"Team CSC"},{"uciCode":"PRL","previousUciCode":"DVL","name":"Predictor-Lotto"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank"},{"uciCode":"A2R","previousUciCode":"A2R","name":"AG2R Prévoyance"},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-Fondital"},{"uciCode":"GST","previousUciCode":"GST","name":"Gerolsteiner"},{"uciCode":"C.A","previousUciCode":"C.A","name":"Crédit Agricole"},{"uciCode":"DSC","previousUciCode":"DSC","name":"Discovery Channel Pro Cycling","colours":["#000000","#1A4E99","#FFF"]},{"uciCode":"BTL","previousUciCode":"BTL","name":"Bouygues Télécom"},{"uciCode":"AGR","previousUciCode":"AGR","name":"Agritubel"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis, Le Crédit par Téléphone"},{"uciCode":"LIQ","previousUciCode":"LIQ","name":"Liquigas-Doimo"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"Française des Jeux"},{"uciCode":"QSI","previousUciCode":"QSI","name":"Quick Step-Innergetic"},{"uciCode":"MRM","previousUciCode":"MRM","name":"Team Milram"},{"uciCode":"AST","previousUciCode":null,"name":"Astana","colours":["#66CCF4","#C5CF6C","#242A4C"]},{"uciCode":"SDV","previousUciCode":"SDV","name":"Saunier Duval-Prodir"},{"uciCode":"BAR","previousUciCode":null,"name":"Barloworld"}]}')},function(e){e.exports=JSON.parse('{"id":"2008","startDate":"2008-07-05","endDate":"2008-07-27","teams":[{"uciCode":"SIL","previousUciCode":"PRL","name":"Silence-Lotto"},{"uciCode":"CSC","previousUciCode":"CSC","name":"Team CSC Saxo Bank"},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"GCE","previousUciCode":"GCE","name":"Caisse d\'Epargne"},{"uciCode":"THR","previousUciCode":"TMO","name":"Team Columbia"},{"uciCode":"BAR","previousUciCode":"BAR","name":"Barloworld","colours":["#FADF6C","#ED4A52","#000"]},{"uciCode":"LIQ","previousUciCode":"LIQ","name":"Liquigas-Doimo"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre"},{"uciCode":"C.A","previousUciCode":"C.A","name":"Crédit Agricole","colours":["#2F6648","#E6442F","#FFF"]},{"uciCode":"QST","previousUciCode":"QSI","name":"Quick-Step"},{"uciCode":"ALM","previousUciCode":"A2R","name":"AG2R La Mondiale"},{"uciCode":"GST","previousUciCode":"GST","name":"Gerolsteiner","colours":["#6C9DBE","#0164AC","#112F55"]},{"uciCode":"AGR","previousUciCode":"AGR","name":"Agritubel"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank","colours":["#F48C34","#183E98","#004B8F"]},{"uciCode":"BTL","previousUciCode":"BTL","name":"Bouygues Télécom"},{"uciCode":"MRM","previousUciCode":"MRM","name":"Team Milram"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"Française des Jeux"},{"uciCode":"SDV","previousUciCode":"SDV","name":"Saunier Duval-Scott","colours":["#DAAF2E","#9D2B1D","#412E26"]},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis, Le Crédit par Téléphone"},{"uciCode":"TSL","previousUciCode":null,"name":"Garmin-Chipotle"}]}')},function(e){e.exports=JSON.parse('{"id":"2009","startDate":"2009-07-04","endDate":"2009-07-26","teams":[{"uciCode":"CTT","previousUciCode":null,"name":"Cervélo TestTeam"},{"uciCode":"SIL","previousUciCode":"SIL","name":"Silence-Lotto"},{"uciCode":"AST","previousUciCode":null,"name":"Astana"},{"uciCode":"SAX","previousUciCode":"CSC","name":"Team Saxo Bank"},{"uciCode":"GRM","previousUciCode":"TSL","name":"Garmin-Slipstream"},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"THR","previousUciCode":"THR","name":"Team Columbia-HTC"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"LIQ","previousUciCode":"LIQ","name":"Liquigas-Doimo"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"Française des Jeux"},{"uciCode":"GCE","previousUciCode":"GCE","name":"Caisse d\'Epargne"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-NGC"},{"uciCode":"BBO","previousUciCode":"BTL","name":"Bbox Bouygues Télécom"},{"uciCode":"QST","previousUciCode":"QST","name":"Quick-Step"},{"uciCode":"KAT","previousUciCode":null,"name":"Team Katusha"},{"uciCode":"AGR","previousUciCode":"AGR","name":"Agritubel","colours":["#2555C1","#2555C1","#FFF"]},{"uciCode":"MRM","previousUciCode":"MRM","name":"Team Milram"},{"uciCode":"SKS","previousUciCode":null,"name":"Skil–Shimano","colours":["#FCFFFF","#2FB6FB","#CD404B"]}]}')},function(e){e.exports=JSON.parse('{"id":"2010","startDate":"2010-07-03","endDate":"2010-07-25","teams":[{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"SAX","previousUciCode":"SAX","name":"Team Saxo Bank"},{"uciCode":"RSH","previousUciCode":null,"name":"Team RadioShack"},{"uciCode":"SKY","previousUciCode":null,"name":"Team Sky"},{"uciCode":"LIQ","previousUciCode":"LIQ","name":"Liquigas-Doimo"},{"uciCode":"GRM","previousUciCode":"GRM","name":"Garmin-Transitions"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"FDJ"},{"uciCode":"KAT","previousUciCode":"KAT","name":"Team Katusha"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"CTT","previousUciCode":"CTT","name":"Cervélo TestTeam","colours":["#010101","#E7442F","#FEFAFD"]},{"uciCode":"OLO","previousUciCode":"SIL","name":"Omega Pharma-Lotto"},{"uciCode":"THR","previousUciCode":"THR","name":"Team HTC-Columbia"},{"uciCode":"BMC","previousUciCode":null,"name":"BMC Racing Team"},{"uciCode":"QST","previousUciCode":"QST","name":"Quick-Step"},{"uciCode":"MRM","previousUciCode":"MRM","name":"Team Milram","colours":["#44B1CA","#ED4A4E","#F4E9E8"]},{"uciCode":"BTL","previousUciCode":"BBO","name":"Bbox Bouygues Telecom"},{"uciCode":"GCE","previousUciCode":"GCE","name":"Caisse d\'Epargne"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"RAB","previousUciCode":null,"name":"Rabobank"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-Farnese Vini"},{"uciCode":"FOT","previousUciCode":null,"name":"Footon-Servetto-Fuji","colours":["#DBBE92","#A04C41","#231E1B"]}]}')},function(e){e.exports=JSON.parse('{"id":"2011","startDate":"2011-07-02","endDate":"2011-07-24","teams":[{"uciCode":"SBS","previousUciCode":"SAX","name":"Saxo Bank-SunGard"},{"uciCode":"LEO","previousUciCode":null,"name":"Leopard Trek"},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"OLO","previousUciCode":"OLO","name":"Omega Pharma-Lotto"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank"},{"uciCode":"GRM","previousUciCode":"GRM","name":"Garmin-Cervélo"},{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"RSH","previousUciCode":"RSH","name":"Team RadioShack","colours":["#F8F4F1","#EA4530","#EA4530"]},{"uciCode":"MOV","previousUciCode":"GCE","name":"Movistar Team"},{"uciCode":"LIQ","previousUciCode":"LIQ","name":"Liquigas-Cannondale"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"SKY","previousUciCode":"SKY","name":"Team Sky"},{"uciCode":"QST","previousUciCode":"QST","name":"Quick-Step"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"FDJ"},{"uciCode":"BMC","previousUciCode":"BMC","name":"BMC Racing Team"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-ISD"},{"uciCode":"THR","previousUciCode":"THR","name":"HTC-Highroad","colours":["#FFF","#68A54F","#363237"]},{"uciCode":"EUC","previousUciCode":"BTL","name":"Team Europcar"},{"uciCode":"KAT","previousUciCode":"KAT","name":"Team Katusha"},{"uciCode":"VCD","previousUciCode":null,"name":"Vacansoleil-DCM"},{"uciCode":"SAU","previousUciCode":null,"name":"Saur-Sojasun"}]}')},function(e){e.exports=JSON.parse('{"id":"2012","startDate":"2012-06-30","endDate":"2012-07-22","teams":[{"uciCode":"BMC","previousUciCode":"BMC","name":"BMC Racing Team"},{"uciCode":"RNT","previousUciCode":"LEO","name":"RadioShack-Nissan"},{"uciCode":"EUC","previousUciCode":"EUC","name":"Team Europcar"},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel-Euskadi"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-ISD"},{"uciCode":"LIQ","previousUciCode":"LIQ","name":"Liquigas-Cannondale"},{"uciCode":"GRS","previousUciCode":"GRM","name":"Garmin-Sharp"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"SAU","previousUciCode":"SAU","name":"Saur-Sojasun"},{"uciCode":"SKY","previousUciCode":"SKY","name":"Team Sky"},{"uciCode":"LTB","previousUciCode":"OLO","name":"Lotto-Belisol"},{"uciCode":"VCD","previousUciCode":"VCD","name":"Vacansoleil-DCM"},{"uciCode":"KAT","previousUciCode":"KAT","name":"Team Katusha"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"FDJ-BigMat"},{"uciCode":"RAB","previousUciCode":"RAB","name":"Rabobank"},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team"},{"uciCode":"STB","previousUciCode":"SBS","name":"Saxo Bank-Tinkoff Bank"},{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"OPQ","previousUciCode":"QST","name":"Omega Pharma-Quick-Step"},{"uciCode":"OGE","previousUciCode":null,"name":"Orica-GreenEDGE"},{"uciCode":"ARG","previousUciCode":null,"name":"Argos-Shimano"}]}')},function(e){e.exports=JSON.parse('{"id":"2013","startDate":"2013-06-29","endDate":"2013-07-21","teams":[{"uciCode":"SKY","previousUciCode":"SKY","name":"Team Sky"},{"uciCode":"CAN","previousUciCode":"LIQ","name":"Cannondale"},{"uciCode":"LTB","previousUciCode":"LTB","name":"Lotto-Belisol"},{"uciCode":"BMC","previousUciCode":"BMC","name":"BMC Racing Team"},{"uciCode":"RLT","previousUciCode":"RNT","name":"RadioShack-Leopard"},{"uciCode":"EUC","previousUciCode":"EUC","name":"Team Europcar"},{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"FDJ.fr"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"TST","previousUciCode":"STB","name":"Saxo-Tinkoff"},{"uciCode":"KAT","previousUciCode":"KAT","name":"Team Katusha"},{"uciCode":"EUS","previousUciCode":"EUS","name":"Euskaltel–Euskadi","colours":["#DB6D38","#010105","#FFF"]},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-Merida"},{"uciCode":"OPQ","previousUciCode":"OPQ","name":"Omega Pharma-Quick-Step"},{"uciCode":"BEL","previousUciCode":"RAB","name":"Belkin Pro Cycling"},{"uciCode":"GRS","previousUciCode":"GRS","name":"Garmin-Sharp"},{"uciCode":"OGE","previousUciCode":"OGE","name":"Orica-GreenEDGE"},{"uciCode":"ARG","previousUciCode":"ARG","name":"Argos-Shimano"},{"uciCode":"VCD","previousUciCode":"VCD","name":"Vacansoleil–DCM","colours":["#0F1427","#0F1427","#C8C177"]},{"uciCode":"SOJ","previousUciCode":"SAU","name":"Sojasun","colours":["#E0E0F8","#2E623C","#C03725"]}]}')},function(e){e.exports=JSON.parse('{"id":"2014","startDate":"2014-07-05","endDate":"2014-07-27","teams":[{"uciCode":"SKY","previousUciCode":"SKY","name":"Team Sky"},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team"},{"uciCode":"KAT","previousUciCode":"KAT","name":"Team Katusha"},{"uciCode":"TCS","previousUciCode":"TST","name":"Tinkoff-Saxo"},{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"CAN","previousUciCode":"CAN","name":"Cannondale","colours":["#629512","#014074","#111310"]},{"uciCode":"BEL","previousUciCode":"BEL","name":"Belkin Pro Cycling"},{"uciCode":"OPQ","previousUciCode":"OPQ","name":"Omega Pharma-Quick-Step"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"GRS","previousUciCode":"GRS","name":"Garmin-Sharp"},{"uciCode":"GIA","previousUciCode":"ARG","name":"Giant-Shimano"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-Merida"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"FDJ.fr"},{"uciCode":"LTB","previousUciCode":"LTB","name":"Lotto-Belisol"},{"uciCode":"BMC","previousUciCode":"BMC","name":"BMC Racing Team"},{"uciCode":"EUC","previousUciCode":"EUC","name":"Team Europcar"},{"uciCode":"TFR","previousUciCode":"RLT","name":"Trek Factory Racing"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"OGE","previousUciCode":"OGE","name":"Orica-GreenEDGE"},{"uciCode":"IAM","previousUciCode":null,"name":"IAM Cycling"},{"uciCode":"TNE","previousUciCode":null,"name":"NetApp-Endura"},{"uciCode":"BSE","previousUciCode":null,"name":"Bretagne-Séché Environnement"}]}')},function(e){e.exports=JSON.parse('{"id":"2015","startDate":"2015-07-04","endDate":"2015-07-26","teams":[{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"FDJ"},{"uciCode":"SKY","previousUciCode":"SKY","name":"Team Sky"},{"uciCode":"TCS","previousUciCode":"TCS","name":"Tinkoff-Saxo"},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team"},{"uciCode":"BMC","previousUciCode":"BMC","name":"BMC Racing Team"},{"uciCode":"LTS","previousUciCode":"LTB","name":"Lotto-Soudal"},{"uciCode":"TGA","previousUciCode":"GIA","name":"Team Giant-Alpecin"},{"uciCode":"KAT","previousUciCode":"KAT","name":"Team Katusha"},{"uciCode":"OGE","previousUciCode":"OGE","name":"Orica-GreenEDGE"},{"uciCode":"EQS","previousUciCode":"OPQ","name":"Etixx-Quick-Step"},{"uciCode":"EUC","previousUciCode":"EUC","name":"Team Europcar"},{"uciCode":"TLJ","previousUciCode":"BEL","name":"LottoNL-Jumbo"},{"uciCode":"TFR","previousUciCode":"TFR","name":"Trek Factory Racing"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-Merida"},{"uciCode":"TCG","previousUciCode":"GRS","name":"Cannondale-Garmin"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"IAM","previousUciCode":"IAM","name":"IAM Cycling"},{"uciCode":"BOA","previousUciCode":"TNE","name":"Bora-Argon 18"},{"uciCode":"BSE","previousUciCode":"BSE","name":"Bretagne-Séché Environnement"},{"uciCode":"MTN","previousUciCode":null,"name":"MTN-Qhubeka"}]}')},function(e){e.exports=JSON.parse('{"id":"2016","startDate":"2016-07-02","endDate":"2016-07-24","teams":[{"uciCode":"SKY","previousUciCode":"SKY","name":"Team Sky"},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team"},{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"TNK","previousUciCode":"TCS","name":"Tinkoff","colours":["#CFEC54","#1C1C24","#1C1C24"]},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"TLJ","previousUciCode":"TLJ","name":"LottoNL-Jumbo"},{"uciCode":"TFS","previousUciCode":"TFR","name":"Trek-Segafredo"},{"uciCode":"IAM","previousUciCode":"IAM","name":"IAM Cycling","colours":["#CACDDD","#D53E2B","#252E4D"]},{"uciCode":"CDT","previousUciCode":"TCG","name":"Cannondale-Drapac"},{"uciCode":"BMC","previousUciCode":"BMC","name":"BMC Racing Team"},{"uciCode":"DDD","previousUciCode":"MTN","name":"Team Dimension Data"},{"uciCode":"TGA","previousUciCode":"TGA","name":"Team Giant-Alpecin"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"FDJ"},{"uciCode":"BOA","previousUciCode":"BOA","name":"Bora-Argon 18"},{"uciCode":"KAT","previousUciCode":"KAT","name":"Team Katusha"},{"uciCode":"LAM","previousUciCode":"LAM","name":"Lampre-Merida"},{"uciCode":"LTS","previousUciCode":"LTS","name":"Lotto-Soudal"},{"uciCode":"TDE","previousUciCode":"EUC","name":"Direct Énergie"},{"uciCode":"EQS","previousUciCode":"EQS","name":"Etixx-Quick-Step"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"OBE","previousUciCode":"OGE","name":"Orica-BikeExchange"},{"uciCode":"FVC","previousUciCode":"BSE","name":"Fortuneo-Vital Concept"}]}')},function(e){e.exports=JSON.parse('{"id":"2017","startDate":"2017-07-01","endDate":"2017-07-23","teams":[{"uciCode":"SKY","previousUciCode":"SKY","name":"Team Sky"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team"},{"uciCode":"TFS","previousUciCode":"TFS","name":"Trek-Segafredo"},{"uciCode":"BMC","previousUciCode":"BMC","name":"BMC Racing Team"},{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"UAD","previousUciCode":"LAM","name":"UAE Team Emirates"},{"uciCode":"FDJ","previousUciCode":"FDJ","name":"Groupama-FDJ"},{"uciCode":"ORS","previousUciCode":"OBE","name":"Orica-Scott"},{"uciCode":"DDD","previousUciCode":"DDD","name":"Team Dimension Data"},{"uciCode":"QST","previousUciCode":"EQS","name":"Quick-Step Floors"},{"uciCode":"BOH","previousUciCode":"BOA","name":"Bora-Hansgrohe"},{"uciCode":"KAT","previousUciCode":"KAT","name":"Team Katusha-Alpecin"},{"uciCode":"LTS","previousUciCode":"LTS","name":"Lotto-Soudal"},{"uciCode":"SUN","previousUciCode":"TGA","name":"Team Sunweb"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"TLJ","previousUciCode":"TLJ","name":"LottoNL-Jumbo"},{"uciCode":"TDE","previousUciCode":"TDE","name":"Direct Énergie"},{"uciCode":"CDT","previousUciCode":"CDT","name":"Cannondale-Drapac"},{"uciCode":"TBM","previousUciCode":null,"name":"Bahrain-Merida"},{"uciCode":"WGG","previousUciCode":null,"name":" Wanty-Groupe Gobert"},{"uciCode":"TFO","previousUciCode":"FVC","name":"Fortuneo-Oscaro"}]}')},function(e){e.exports=JSON.parse('{"id":"2018","startDate":"2018-07-07","endDate":"2018-07-29","teams":[{"uciCode":"SKY","previousUciCode":"SKY","name":"Team Sky"},{"uciCode":"EFD","previousUciCode":"CDT","name":"EF Education First-Drapac"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"SUN","previousUciCode":"SUN","name":"Team Sunweb"},{"uciCode":"FST","previousUciCode":"TFO","name":"Fortuneo-Samsic"},{"uciCode":"TBM","previousUciCode":"TBM","name":"Bahrain-Merida"},{"uciCode":"MTS","previousUciCode":"ORS","name":"Mitchelton-Scott"},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team"},{"uciCode":"BMC","previousUciCode":"BMC","name":"BMC Racing Team"},{"uciCode":"UAD","previousUciCode":"UAD","name":"UAE Team Emirates"},{"uciCode":"QST","previousUciCode":"QST","name":"Quick-Step Floors"},{"uciCode":"BOH","previousUciCode":"BOH","name":"Bora-Hansgrohe"},{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"DDD","previousUciCode":"DDD","name":"Team Dimension Data"},{"uciCode":"TKA","previousUciCode":"KAT","name":"Team Katusha-Alpecin"},{"uciCode":"GFC","previousUciCode":"FDJ","name":"Groupama-FDJ"},{"uciCode":"TLJ","previousUciCode":"TLJ","name":"LottoNL-Jumbo"},{"uciCode":"LTS","previousUciCode":"LTS","name":"Lotto-Soudal"},{"uciCode":"TDE","previousUciCode":"TDE","name":"Direct Énergie"},{"uciCode":"TFS","previousUciCode":"TFS","name":"Trek-Segafredo"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"WGG","previousUciCode":"WGG","name":" Wanty-Groupe Gobert"}]}')},function(e){e.exports=JSON.parse('{"id":"2019","startDate":"2019-07-06","endDate":"2019-07-28","teams":[{"uciCode":"INS","previousUciCode":"SKY","name":"Team Ineos"},{"uciCode":"BOH","previousUciCode":"BOH","name":"Bora-Hansgrohe"},{"uciCode":"DQT","previousUciCode":"QST","name":"Deceuninck-Quick-Step"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"TBM","previousUciCode":"TBM","name":"Bahrain-McLaren"},{"uciCode":"GFC","previousUciCode":"GFC","name":"Groupama-FDJ"},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team"},{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"TJV","previousUciCode":"TLJ","name":"Team Jumbo-Visma"},{"uciCode":"EF1","previousUciCode":"EFD","name":"EF Pro Cycling"},{"uciCode":"MTS","previousUciCode":"MTS","name":"Mitchelton-Scott"},{"uciCode":"CPT","previousUciCode":"BMC","name":"CCC Team"},{"uciCode":"UAD","previousUciCode":"UAD","name":"UAE Team Emirates"},{"uciCode":"TFS","previousUciCode":"TFS","name":"Trek-Segafredo"},{"uciCode":"SUN","previousUciCode":"SUN","name":"Team Sunweb"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"LTS","previousUciCode":"LTS","name":"Lotto-Soudal"},{"uciCode":"TDE","previousUciCode":"TDE","name":"Total Direct Énergie"},{"uciCode":"TKA","previousUciCode":"TKA","name":"Team Katusha-Alpecin","colours":["#79C3E6","#AC0320","#AC0320"]},{"uciCode":"WGG","previousUciCode":"WGG","name":"Wanty-Gobert","colours":["#073147","#073147","#D9DE30"]},{"uciCode":"TDD","previousUciCode":"DDD","name":"Team Dimension Data"},{"uciCode":"ARK","previousUciCode":"FST","name":"Arkéa-Samsic"}]}')},function(e){e.exports=JSON.parse('{"id":"2020","startDate":"2020-08-29","endDate":"2020-09-20","teams":[{"uciCode":"IGD","previousUciCode":"INS","name":"Ineos Grenadiers"},{"uciCode":"TJV","previousUciCode":"TJV","name":"Team Jumbo-Visma"},{"uciCode":"BOH","previousUciCode":"BOH","name":"Bora-Hansgrohe"},{"uciCode":"ALM","previousUciCode":"ALM","name":"AG2R La Mondiale"},{"uciCode":"DQT","previousUciCode":"DQT","name":"Deceuninck-Quick-Step"},{"uciCode":"GFC","previousUciCode":"GFC","name":"Groupama-FDJ"},{"uciCode":"TBM","previousUciCode":"TBM","name":"Bahrain-McLaren"},{"uciCode":"EF1","previousUciCode":"EF1","name":"EF Pro Cycling"},{"uciCode":"ARK","previousUciCode":"ARK","name":"Arkéa-Samsic"},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team"},{"uciCode":"TFS","previousUciCode":"TFS","name":"Trek-Segafredo"},{"uciCode":"CCC","previousUciCode":"CPT","name":"CCC Team"},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis"},{"uciCode":"UAD","previousUciCode":"UAD","name":"UAE Team Emirates"},{"uciCode":"AST","previousUciCode":"AST","name":"Astana"},{"uciCode":"LTS","previousUciCode":"LTS","name":"Lotto-Soudal"},{"uciCode":"MTS","previousUciCode":"MTS","name":"Mitchelton-Scott"},{"uciCode":"ISN","previousUciCode":null,"name":"Israel Start-Up Nation"},{"uciCode":"TDE","previousUciCode":"TDE","name":"Total Direct Énergie"},{"uciCode":"NTT","previousUciCode":"TDD","name":"NTT Pro Cycling"},{"uciCode":"SUN","previousUciCode":"SUN","name":"Team Sunweb"},{"uciCode":"BVC","previousUciCode":null,"name":"B&B Hotels-Vital Concept"}]}')},function(e){e.exports=JSON.parse('{"id":"2021","startDate":"2021-06-26","endDate":"2021-07-18","teams":[{"uciCode":"UAD","previousUciCode":"UAD","name":"UAE Team Emirates","colours":["#DDDDE7","#261A1E","#BD1C2B"]},{"uciCode":"TJV","previousUciCode":"TJV","name":"Team Jumbo-Visma","colours":["#141318","#EE554D","#EFC054"]},{"uciCode":"IGD","previousUciCode":"IGD","name":"Ineos Grenadiers","colours":["#232C3D","#B61615","#FFF"]},{"uciCode":"ISN","previousUciCode":"ISN","name":"Israel Start-Up Nation","colours":["#EEEEEC","#65B5F0","#09122F"]},{"uciCode":"TFS","previousUciCode":"TFS","name":"Trek-Segafredo","colours":["#EEE","#CB252B","#2A364C"]},{"uciCode":"DQT","previousUciCode":"DQT","name":"Deceuninck-Quick-Step","colours":["#004B8F","#001D45","#FDFFFE"]},{"uciCode":"MOV","previousUciCode":"MOV","name":"Movistar Team","colours":["#3093D9","#101016","#FFF"]},{"uciCode":"BOH","previousUciCode":"BOH","name":"Bora-Hansgrohe","colours":["#367E72","#284145","#FFFFFF"]},{"uciCode":"GFC","previousUciCode":"GFC","name":"Groupama-FDJ","colours":["#EEF0F4","#A22B31","#02439F"]},{"uciCode":"COF","previousUciCode":"COF","name":"Cofidis","colours":["#CD3C34","#CD3C34","#F2D652"]},{"uciCode":"AFC","previousUciCode":null,"name":"Alpecin-Fenix","colours":["#28334D","#D13E33","#D9D9E7"]},{"uciCode":"EFN","previousUciCode":"EF1","name":"EF Education-Nippo","colours":["#EE769D","#505165","#28334D"]},{"uciCode":"ACT","previousUciCode":"ALM","name":"AG2R Citroën Team","colours":["#FFF","#DD1F29","#000"]},{"uciCode":"ARK","previousUciCode":"ARK","name":"Arkéa-Samsic","colours":["#E0422E","#0E0E0E","#FBFFFF"]},{"uciCode":"DSM","previousUciCode":"SUN","name":"Team DSM","colours":["#0E0A0A","#B7EBFF","#FFFCFD"]},{"uciCode":"LTS","previousUciCode":"LTS","name":"Lotto-Soudal","colours":["#D1190F","#030D0A","#F1F4FD"]},{"uciCode":"TBV","previousUciCode":"TBM","name":"Team Bahrain Victorious","colours":["#ED473B","#E48835","#DAD4D4"]},{"uciCode":"BEX","previousUciCode":"MTS","name":"Team BikeExchange","colours":["#F7F6F9","#23BFB4","#070707"]},{"uciCode":"APT","previousUciCode":"AST","name":"Astana-Premier Tech","colours":["#66CCF4","#C5CF6C","#242A4C"]},{"uciCode":"TQA","previousUciCode":"NTT","name":"Team Qhubeka NextHash","colours":["#F2F2F3","#2D2D2E","#2D2D2E"]},{"uciCode":"TEN","previousUciCode":"TDE","name":"Team TotalEnergies","colours":["#D9D8DD","#118DD5","#24272C"]},{"uciCode":"IWG","previousUciCode":"CCC","name":"Intermarché-Wanty-Gobert","colours":["#1B4B9B","#B0F749","#FFF"]},{"uciCode":"BBK","previousUciCode":"BVC","name":"B&B Hotels","colours":["#4CA894","#1E2424","#FFF"]}]}')},function(e,n,r){"use strict";r.r(n)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,